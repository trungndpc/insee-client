{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst native_bridge_1 = require(\"./utils/native-bridge\");\n\nconst config_1 = require(\"./config\");\n\nconst common_1 = require(\"./utils/common\");\n/** Class chứa các phương thức tương tác với ứng dụng Zalo. Cách gọi ZJSBridge.Zalo.* */\n\n\nclass Zalo {\n  /**\n   * Get app version\n   * @example\n   * ZJSBridge.Zalo.getVersion()\n   */\n  static getVersion() {\n    return common_1.getZaloVersion();\n  }\n  /**\n   * Set Access Token.\n   * @example\n   * ZJSBridge.Zalo.getAccessToken()\n   */\n\n\n  static getAccessToken() {\n    const accessTk = native_bridge_1.default.getAccessToken();\n    return accessTk || \"no token\";\n  }\n  /**\n   * Set Access Token.\n   * @example\n   * ZJSBridge.Zalo.setAccessToken(\"\")\n   * @param {string} token\n   */\n\n\n  static setAccessToken(token) {\n    if (!token) {\n      return \"no token\";\n    }\n\n    return native_bridge_1.default.setAccessToken(token);\n  }\n  /**\n   * Mở tab Danh bạ trên Zalo\n   * @example\n   * ZJSBridge.Zalo.openTabContact(e => {console.log(e)})\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static openTabContact(callback) {\n    console.log(\"openTabContact\");\n    return native_bridge_1.default.jsCall(config_1.Action.opentabcontact, {}, callback);\n  }\n  /**\n   * Hàm lấy những sticker đã tải của người dùng\n   * @example\n   * ZJSBridge.Zalo.getDownloadedSticker(e => {console.log(e)})\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static getDownloadedSticker(callback) {\n    console.log(\"getDownloadedSticker\");\n    return native_bridge_1.default.jsCall(config_1.Action.getdownloadedsticker, {}, callback);\n  }\n  /**\n   * Hàm mở cửa sổ share sticker cho bạn bè\n   * @example\n   * ZJSBridge.Zalo.openShareSticker(cateDetailsInfo, e => {console.log(e)})\n   * @param {string} cateDetailsInfo Giá trị tương ứng bộ sticker cần share (là một string json)\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static openShareSticker(cateDetailsInfo, callback) {\n    return native_bridge_1.default.jsCall(config_1.Action.opensharesticker, {\n      cateDetailsInfo: cateDetailsInfo\n    }, callback);\n  }\n  /**\n   * Mở webview Zalo với URL truyền vào\n   * @example\n   * ZJSBridge.Zalo.openInApp(\"https://zalo.me\", e => {console.log(e)})\n   * @param {*} url URL muốn mở webview\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static openInApp(url, callback) {\n    return native_bridge_1.default.jsCall(config_1.Action.openinapp, {\n      url: url\n    }, callback);\n  }\n  /**\n   * Mở trình duyệt mặc định của điện thoại với URL truyền vào\n   * @example\n   * ZJSBridge.Zalo.openOutApp(\"https://zalo.me\", e => {console.log(e)})\n   * @param {string} url URL muốn mở trình duyệt\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static openOutApp(url, callback) {\n    return native_bridge_1.default.jsCall(config_1.Action.openoutapp, {\n      url: url\n    }, callback);\n  }\n  /**\n   * Hàm gọi màn hình share lên tường của Zalo, với các thông tin truyền vào\n   * @example\n   * ZJSBridge.Zalo.openPostFeed(feedInfo, e => {console.log(e)})\n   * @param {pbject} feedInfo\n   * - Type = 1: post feed hình ảnh\n   * ```\n   * {\"type\":1, \"photoUrl\":\"http://dev.org.zads.zdn.vn/2a16c7fefbbb12e54baa\"}\n   * ```\n   * - Type = 4: post feed link\n   * ```\n   * {\n   *   \"type\":4,\n   *   \"link\":\"http://news.zing.vn/Trung-uong-quyet-dinh-phuong-an-nhan-su-cap-cao-post632739.html\",\n   *   \"title\":\"Trung ương quyết định phương án nhân sự cấp cao\",\n   *   \"thumb\": \"xxx\",\n   *   \"description\":\"xxx\",\n   * }\n   * ```\n   * - Type = 5: post feed profile\n   * ```\n   * {\n   *   \"type\":5,\n   *   \"avt\":\"http://s120.avatar.talk.zdn.vn/5/f/9/6/27/120/33a07b66a06fd78ba5e645a750f3d72b.jpg\",\n   *   \"uid\":\"116052312\",\n   *   \"dpn\": \"Galaxy Cinema\",\n   * }\n   * ```\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static openPostFeed(feedInfo, callback) {\n    feedInfo[\"zapp\"] = native_bridge_1.default.getAppId();\n    return native_bridge_1.default.jsCall(config_1.Action.openpostfeed, feedInfo, callback);\n  }\n  /**\n   * Hàm gọi màn hình share lên cho bạn bè, với các thông tin truyền vào\n   * @example\n   * ZJSBridge.Zalo.openShareSheet(sheetInfo, e => {console.log(e)})\n   * @param {object} sheetInfo\n   * - Chia sẻ ảnh\n   * ```\n   * {\"type\":1,\"photoUrl\":\"http://dev.org.zads.zdn.vn/2a16c7fefbbb12e54baa\"}\n   * ```\n   * - Chia sẻ GIF\n   * ```\n   * {\n   *  \"type\":11,\n   *  \"photoUrl\":\"http://dev.org.zads.zdn.vn/2a16c7fefbbb12e54baa\",\n   *  \"gifUrl\":\"http://dev.org.zads.zdn.vn/fc88fe60c2252b7b7234\",\n   *  \"width\":480,\n   *  \"height\":270\n   * }\n   * ```\n   * - Chia sẻ Video\n   * ```\n   * {\n   *   \"type\": 12,\n   *   \"videoThumb\":\"http://dev.org.zads.zdn.vn/fc88fe60c2252b7b7234\",\n   *   \"videoUrl\":\"http://dev.org.zads.zdn.vn/fc88fe60c2252b7b7234\",\n   *   \"width\":480,\n   *   \"height\":270\n   * }\n   * ```\n   * - Chia sẻ link\n   * ```\n   * {\n   *   \"type\": 4,\n   *   \"link\": \"\",\n   *   \"chatOnly\": 1, // tắt bật share lên nhật ký\n   * }\n   * ```\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static openShareSheet(sheetInfo, callback) {\n    sheetInfo[\"zapp\"] = native_bridge_1.default.getAppId();\n    return native_bridge_1.default.jsCall(config_1.Action.opensharesheet, sheetInfo, callback);\n  }\n  /**\n   * Open profile.\n   * @example\n   * ZJSBridge.Zalo.openProfile(data, e => {console.log(e)})\n   * @param {object} data\n   * ```\n   * {\n   *      \"uId\": xxx,\n   *      \"type\": 0 | 1 | 2,\n   *      \"appId\": xxx (appIdNoise),\n   *      \"sourceId\": xxx,\n   *      \"sourceIndex\": xxx\n   * }\n   * ```\n   * - type:\n   *      - 0: Mở page (OA), pageId truyền lên được encode bằng ZCypher, (ZCypher.encodePageId(pageId)).\n   *      - 1: Mở profile User, userId truyền lên được encode bằng ZCypher by AppId.\n   *      - 2: Mở profile OA bằng Alias (field uid truyền lên là alias của OA).\n   * > Trong trường hợp không decode thì client sẽ sử dụng trực tiếp field uId trong options gởi lên để mở profile.\n   * > Nếu có decode thì dữ liệu trả về sẽ là trường uId đã được decode.\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static openProfile(data, callback) {\n    data[\"zapp\"] = native_bridge_1.default.getAppId();\n    return native_bridge_1.default.jsCall(config_1.Action.openprofile, data, callback);\n  }\n  /**\n   * Open feed detail.\n   * @example\n   * ZJSBridge.Zalo.openFeedDetail(data, e => {console.log(e)})\n   * @param {object} data\n   * ```\n   * {\n   *      \"feed_id\": xxx,\n   *      \"owner_id\": xxx\n   * }\n   * ```\n   * > Trong trường hợp không decode thì client sẽ sử dụng trực tiếp field feed_id và owner_id của html5 gởi lên trong options gởi lên để mở feed detail.\n   * > Nếu có decode thì dữ liệu trả về sẽ là trường feed_id và owner_id đã được decode. (ZCypher.encodeFeedId - ZCypher.encodeUserId).\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static openFeedDetail(data, callback) {\n    data[\"zapp\"] = native_bridge_1.default.getAppId();\n    return native_bridge_1.default.jsCall(config_1.Action.openfeeddetail, data, callback);\n  }\n  /**\n   * Open friend rada.\n   * @example\n   * ZJSBridge.Zalo.openFriendRada(e => {console.log(e)})\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static openFriendRada(callback) {\n    return native_bridge_1.default.jsCall(config_1.Action.openfriendrada, {}, callback);\n  }\n  /**\n   * Open page.\n   * @example\n   * ZJSBridge.Zalo.openPage(e => {console.log(e)})\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static openPage(callback) {\n    return native_bridge_1.default.jsCall(config_1.Action.openpage, {}, callback);\n  }\n  /**\n   * Open photo detail.\n   * @example\n   * ZJSBridge.Zalo.openPhotoDetail(data, e => {console.log(e)})\n   * @param {object} data\n   * ```\n   * {\n   *      \"owner_id\": xxx,\n   *      \"photo_id\": xxx\n   * }\n   * ```\n   * > Trong trường hợp không decode thì client sẽ sử dụng trực tiếp field photo_id và owner_id của html5 gởi lên trong options gởi lên để mở game detail.\n   * > Nếu có decode thì dữ liệu trả về sẽ là trường photo_id và owner_id đã được decode. (ZCypherExt.encodePhotoId, ZCypher.encodeUserId).\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static openPhotoDetail(data, callback) {\n    data[\"zapp\"] = native_bridge_1.default.getAppId();\n    return native_bridge_1.default.jsCall(config_1.Action.openphotodetail, data, callback);\n  }\n  /**\n   * Open galary.\n   * @example\n   * ZJSBridge.Zalo.openGalary(data, e => {console.log(e)})\n   * @param {object} data\n   * ```\n   * {\n   *      \"uId\": xxx\n   * }\n   * ```\n   * > Trong trường hợp không decode thì client sẽ sử dụng trực tiếp field uId trong options gởi lên để mở gallery.\n   * > Nếu có decode thì dữ liệu trả về sẽ là trường uId đã được decode. (ZCypher.encodeUserId).\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static openGalary(data, callback) {\n    data[\"zapp\"] = native_bridge_1.default.getAppId();\n    return native_bridge_1.default.jsCall(config_1.Action.opengalary, data, callback);\n  }\n  /**\n   * Open game center.\n   * @example\n   * ZJSBridge.Zalo.openGameCenter(e => {console.log(e)})\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static openGameCenter(callback) {\n    return native_bridge_1.default.jsCall(config_1.Action.opengamecenter, {}, callback);\n  }\n  /**\n   * Open game news.\n   * @example\n   * ZJSBridge.Zalo.openGameNews(e => {console.log(e)})\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static openGameNews(callback) {\n    return native_bridge_1.default.jsCall(config_1.Action.opengamenews, {}, callback);\n  }\n  /**\n   * Open tab social.\n   * @example\n   * ZJSBridge.Zalo.openTabSocial(e => {console.log(e)})\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static openTabSocial(callback) {\n    return native_bridge_1.default.jsCall(config_1.Action.opentabsocial, {}, callback);\n  }\n  /**\n   * Open friend suggest.\n   * @example\n   * ZJSBridge.Zalo.openFriendSuggest(e => {console.log(e)})\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static openFriendSuggest(callback) {\n    return native_bridge_1.default.jsCall(config_1.Action.openfriendsuggest, {}, callback);\n  }\n  /**\n   * Open group list.\n   * @example\n   * ZJSBridge.Zalo.openGroupList(e => {console.log(e)})\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static openGroupList(callback) {\n    return native_bridge_1.default.jsCall(config_1.Action.opengrouplist, {}, callback);\n  }\n  /**\n   * Open nearby.\n   * @example\n   * ZJSBridge.Zalo.openNearby(e => {console.log(e)})\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static openNearby(callback) {\n    return native_bridge_1.default.jsCall(config_1.Action.opennearby, {}, callback);\n  }\n  /**\n   * Open room.\n   * @example\n   * ZJSBridge.Zalo.openRoom(e => {console.log(e)})\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static openRoom(callback) {\n    return native_bridge_1.default.jsCall(config_1.Action.openroom, {}, callback);\n  }\n  /**\n   * Open sticker store.\n   * @example\n   * ZJSBridge.Zalo.openStickerStore(e => {console.log(e)})\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static openStickerStore(callback) {\n    return native_bridge_1.default.jsCall(config_1.Action.openstickerstore, {}, callback);\n  }\n  /**\n   * Open create chat.\n   * @example\n   * ZJSBridge.Zalo.openCreateChat(e => {console.log(e)})\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static openCreateChat(callback) {\n    return native_bridge_1.default.jsCall(config_1.Action.opencreatechat, {}, callback);\n  }\n  /**\n   * Copy link cate sticker.\n   * @example\n   * ZJSBridge.Zalo.copyLinkCateSticker(e => {console.log(e)})\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static copyLinkCateSticker(callback) {\n    return native_bridge_1.default.jsCall(config_1.Action.copylinkcatesticker, {}, callback);\n  }\n  /**\n   * Open chat.\n   * @example\n   * ZJSBridge.Zalo.openChat(data, e => {console.log(e)})\n   * @param {object} data\n   * ```\n   * {\n   *      \"uId\": xxx,\n   *      \"type\": 0 | 1,\n   *      \"appId\": xxx (appIdNoise),\n   *      \"sourceId\": xxx,\n   *      \"sourceIndex\": xxx,\n   *      \"force\": 0 | 1\n   * }\n   * ```\n   * - type:\n   *      - 0: open chat với page (pageId encode bằng ZCypher).\n   *      - 1: open chat với user (userId encode bằng ZCypher theo appId).\n   * > Trong trường hợp không decode thì client sẽ sử dụng trực tiếp field uId trong options gởi lên để mở tab chat.\n   * > Nếu có decode thì dữ liệu trả về sẽ là trường uId đã được decode.\n   * > Giá trị force là 1 (force) hoặc 0 (không force)\"\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static openChat(data, callback) {\n    data[\"zapp\"] = native_bridge_1.default.getAppId();\n    return native_bridge_1.default.jsCall(config_1.Action.openchat, data, callback);\n  }\n  /**\n   * Force open tab chat.\n   * @example\n   * ZJSBridge.Zalo.openTabChat(e => {console.log(e)})\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static openTabChat(callback) {\n    return native_bridge_1.default.jsCall(config_1.Action.opentabchat, {}, callback);\n  }\n  /**\n   * Open add friend.\n   * @example\n   * ZJSBridge.Zalo.openAddFriend(data, e => {console.log(e)})\n   * @param {object} data\n   * ```\n   * {\n   *      \"uid_from\": xxx (encode),\n   *      \"uid_to\": xxx (encode),\n   *      \"source\": xxx\n   * }\n   * ```\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static openAddFriend(data, callback) {\n    data[\"zapp\"] = native_bridge_1.default.getAppId();\n    return native_bridge_1.default.jsCall(config_1.Action.openaddfriend, data, callback);\n  }\n  /**\n   * Open tab more.\n   * @example\n   * ZJSBridge.Zalo.openTabMore(e => {console.log(e)})\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static openTabMore(callback) {\n    return native_bridge_1.default.jsCall(config_1.Action.opentabmore, {}, callback);\n  }\n  /**\n   * Open login devices.\n   * @example\n   * ZJSBridge.Zalo.openLoginDevices(e => {console.log(e)})\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static openLoginDevices(callback) {\n    return native_bridge_1.default.jsCall(config_1.Action.openlogindevices, {}, callback);\n  }\n  /**\n   * Open send sticker.\n   * @example\n   * ZJSBridge.Zalo.openSendSticker(data, e => {console.log(e)})\n   * @param {object} data\n   * ```\n   * {\n   *      \"id\": <int>, // id của sticker được gửi\n   *      \"touserid\": xxx (encode), // id của người cần gửi tới\n   *      \"cateId\": <int>, // category id của bộ sticker\n   *      \"type\": <int>, // loại sticker\n   *      \"autoplay\": 0 | 1, // default sẽ là 1. Không có field này cũng sẽ giữ logic cũ là auto play 1.\n   *      \"msg\": \"Hello guys\",\n   *      \"mentions\": [],\n   *      \"stickerList\": [\n   *          {\n   *              \"id\": <int>,\n   *              \"catId\": <int>,\n   *              \"type\": <int>,\n   *              \"autoplay\": 0 | 1\n   *          }\n   *      ]\n   * }\n   * ```\n   * - autoplay:\n   *      - default sẽ là 1. Không có field này cũng sẽ giữ logic cũ là auto play 1.\n   *      - 0 sẽ dùng cho Full Screen Sticker LUA. Kịch bản gửi lại quà khi nhận được 1 con LUA mới. Nếu không muốn autoplay back\n   * - \"msg\" + \"mentions\" sử dụng khi muốn gửi kèm msg text có mention (đang dùng cho msg ecard sinh nhật trong group).\n   * - \"stickerList\" nếu có sẽ lấy random 1 trong các sticker để gửi đi thay vì sticker id default ở cấp ngoài.\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static openSendSticker(data, callback) {\n    data[\"zapp\"] = native_bridge_1.default.getAppId();\n    return native_bridge_1.default.jsCall(config_1.Action.opensendsticker, data, callback);\n  }\n  /**\n   * Report abuse.\n   * @example\n   * ZJSBridge.Zalo.reportAbuse(data, e => {console.log(e)})\n   * @param {object} data\n   * ```\n   * {\n   *      \"uidto\": xxx, // uid cua user or OA\n   *      \"type\": <int>,\n   *      \"objectid\": xxx,\n   *      \"message\": \"\",\n   * }\n   * ```\n   * - type: hiện chỉ đang support type 2, 5\n   *      - REPORT_PHOTO 1 (uid = photoOwnerUid, objectId = photoId)\n   *      - REPORT_PROFILE 2 (uid = profileUid, objectId = \"\"\"\")\n   *      - REPORT_SPAM 3 (uid = profileUid)\n   *      - REPORT_SPAM_IN_ROOM 4 (uid = senderUid, objectId = roomId)\n   *      - REPORT_VIP_PROFILE 5 (uid = OA uid, objectId = \"\"\"\")\n   *      - REPORT_VIP_FEED 6 (uid = feedOwnerUid, objectId = feedId)\n   *      - REPORT_NORMAL_FEED 7 (uid = feedOwnerUid, objectId = feedId)\n   *      - REPORT_FEED_COMMENT 8  (uid = feedOwnerUid, objectId = feedId, reportMsg = commendUid)\n   *      - REPORT_SPAM_WIFI_ROOM 9 (uid = photoOwnerUid, objectId = globalMsgId)\n   *      - REPORT_LINK 10  (reportMsg = url bị report)\n   *      - REPORT_STORY 11) (uid = storyOwnerUid, objectId = storyId)\"\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static reportAbuse(data, callback) {\n    data[\"zapp\"] = native_bridge_1.default.getAppId();\n    return native_bridge_1.default.jsCall(config_1.Action.reportabuse, data, callback);\n  }\n  /**\n   * Follow OA.\n   * @example\n   * ZJSBridge.Zalo.followOA(data, e => {console.log(e)})\n   * @param {object} data\n   * ```\n   * {\n   *      \"uid\": xxx // encode PageId\n   * }\n   * ```\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static followOA(data, callback) {\n    data[\"zapp\"] = native_bridge_1.default.getAppId();\n    return native_bridge_1.default.jsCall(config_1.Action.followoa, data, callback);\n  }\n  /**\n   * Unfollow OA.\n   * @example\n   * ZJSBridge.Zalo.unfollowOA(data, e => {console.log(e)})\n   * @param {object} data\n   * ```\n   * {\n   *      \"uid\": xxx // encode PageId\n   * }\n   * ```\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static unfollowOA(data, callback) {\n    data[\"zapp\"] = native_bridge_1.default.getAppId();\n    return native_bridge_1.default.jsCall(config_1.Action.unfollowoa, data, callback);\n  }\n  /**\n   * Open game detail.\n   * @example\n   * ZJSBridge.Zalo.openGameDetail(data, e => {console.log(e)})\n   * @param {object} data\n   * ```\n   * {\n   *      \"zapp_id\": xxx,\n   *      \"package\": \"gsn.game.zingplaynew1\"\n   * }\n   * ```\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static openGameDetail(data, callback) {\n    return native_bridge_1.default.jsCall(config_1.Action.opengamedetail, data, callback);\n  }\n  /**\n   * Dùng cho H5 chủ động request camera permission.\n   * @example\n   * ZJSBridge.Zalo.requestCamera(e => {console.log(e)})\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   * ```\n   * {\n   *      \"error_code\": 0,\n   *      \"error_message\": \"User accepted\",\n   * }\n   *```\n   * Error code define:\n   * -  0: User accepted\n   * -  1: App had permission before\n   * - -1: Unknown error\n   * - -2: User denied\n   */\n\n\n  static requestCamera(callback) {\n    return native_bridge_1.default.jsCall(config_1.Action.requestcamera, {}, callback);\n  }\n  /**\n   * Mở Mini App\n   * @example\n   * ZJSBridge.Zalo.openMiniApp(data, e => {console.log(e)})\n   * @param {object} data\n   * ```\n   * {\n   *      \"appId\": \"\",\n   *      \"params\": {\n   *          \"key\": \"value\"\n   *      }\n   * }\n   * ```\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static openMiniApp(data, callback) {\n    const appId = data === null || data === void 0 ? void 0 : data.appId;\n    const params = (data === null || data === void 0 ? void 0 : data.params) || {};\n    const queryParamString = Object.entries(params).map(function ([key, value]) {\n      return [key, value].join(\"=\");\n    }).join(\"&\");\n    return native_bridge_1.default.jsCall(config_1.Action.open_mp, {\n      mpUrl: `https://h5.zdn.vn/zapps/${appId}/${queryParamString.length > 0 ? \"?\" + queryParamString : \"\"}`,\n      mpInfo: {\n        appId: appId\n      }\n    }, callback);\n  }\n\n}\n\nexports.default = Zalo;","map":{"version":3,"sources":["/home/trungnd2/Downloads/insee-client/node_modules/zalo-js-bridge/lib/zalo.js"],"names":["Object","defineProperty","exports","value","native_bridge_1","require","config_1","common_1","Zalo","getVersion","getZaloVersion","getAccessToken","accessTk","default","setAccessToken","token","openTabContact","callback","console","log","jsCall","Action","opentabcontact","getDownloadedSticker","getdownloadedsticker","openShareSticker","cateDetailsInfo","opensharesticker","openInApp","url","openinapp","openOutApp","openoutapp","openPostFeed","feedInfo","getAppId","openpostfeed","openShareSheet","sheetInfo","opensharesheet","openProfile","data","openprofile","openFeedDetail","openfeeddetail","openFriendRada","openfriendrada","openPage","openpage","openPhotoDetail","openphotodetail","openGalary","opengalary","openGameCenter","opengamecenter","openGameNews","opengamenews","openTabSocial","opentabsocial","openFriendSuggest","openfriendsuggest","openGroupList","opengrouplist","openNearby","opennearby","openRoom","openroom","openStickerStore","openstickerstore","openCreateChat","opencreatechat","copyLinkCateSticker","copylinkcatesticker","openChat","openchat","openTabChat","opentabchat","openAddFriend","openaddfriend","openTabMore","opentabmore","openLoginDevices","openlogindevices","openSendSticker","opensendsticker","reportAbuse","reportabuse","followOA","followoa","unfollowOA","unfollowoa","openGameDetail","opengamedetail","requestCamera","requestcamera","openMiniApp","appId","params","queryParamString","entries","map","key","join","open_mp","mpUrl","length","mpInfo"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst native_bridge_1 = require(\"./utils/native-bridge\");\nconst config_1 = require(\"./config\");\nconst common_1 = require(\"./utils/common\");\n/** Class chứa các phương thức tương tác với ứng dụng Zalo. Cách gọi ZJSBridge.Zalo.* */\nclass Zalo {\n    /**\n     * Get app version\n     * @example\n     * ZJSBridge.Zalo.getVersion()\n     */\n    static getVersion() {\n        return common_1.getZaloVersion();\n    }\n    /**\n     * Set Access Token.\n     * @example\n     * ZJSBridge.Zalo.getAccessToken()\n     */\n    static getAccessToken() {\n        const accessTk = native_bridge_1.default.getAccessToken();\n        return accessTk || \"no token\";\n    }\n    /**\n     * Set Access Token.\n     * @example\n     * ZJSBridge.Zalo.setAccessToken(\"\")\n     * @param {string} token\n     */\n    static setAccessToken(token) {\n        if (!token) {\n            return \"no token\";\n        }\n        return native_bridge_1.default.setAccessToken(token);\n    }\n    /**\n     * Mở tab Danh bạ trên Zalo\n     * @example\n     * ZJSBridge.Zalo.openTabContact(e => {console.log(e)})\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static openTabContact(callback) {\n        console.log(\"openTabContact\");\n        return native_bridge_1.default.jsCall(config_1.Action.opentabcontact, {}, callback);\n    }\n    /**\n     * Hàm lấy những sticker đã tải của người dùng\n     * @example\n     * ZJSBridge.Zalo.getDownloadedSticker(e => {console.log(e)})\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static getDownloadedSticker(callback) {\n        console.log(\"getDownloadedSticker\");\n        return native_bridge_1.default.jsCall(config_1.Action.getdownloadedsticker, {}, callback);\n    }\n    /**\n     * Hàm mở cửa sổ share sticker cho bạn bè\n     * @example\n     * ZJSBridge.Zalo.openShareSticker(cateDetailsInfo, e => {console.log(e)})\n     * @param {string} cateDetailsInfo Giá trị tương ứng bộ sticker cần share (là một string json)\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static openShareSticker(cateDetailsInfo, callback) {\n        return native_bridge_1.default.jsCall(config_1.Action.opensharesticker, { cateDetailsInfo: cateDetailsInfo }, callback);\n    }\n    /**\n     * Mở webview Zalo với URL truyền vào\n     * @example\n     * ZJSBridge.Zalo.openInApp(\"https://zalo.me\", e => {console.log(e)})\n     * @param {*} url URL muốn mở webview\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static openInApp(url, callback) {\n        return native_bridge_1.default.jsCall(config_1.Action.openinapp, { url: url }, callback);\n    }\n    /**\n     * Mở trình duyệt mặc định của điện thoại với URL truyền vào\n     * @example\n     * ZJSBridge.Zalo.openOutApp(\"https://zalo.me\", e => {console.log(e)})\n     * @param {string} url URL muốn mở trình duyệt\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static openOutApp(url, callback) {\n        return native_bridge_1.default.jsCall(config_1.Action.openoutapp, { url: url }, callback);\n    }\n    /**\n     * Hàm gọi màn hình share lên tường của Zalo, với các thông tin truyền vào\n     * @example\n     * ZJSBridge.Zalo.openPostFeed(feedInfo, e => {console.log(e)})\n     * @param {pbject} feedInfo\n     * - Type = 1: post feed hình ảnh\n     * ```\n     * {\"type\":1, \"photoUrl\":\"http://dev.org.zads.zdn.vn/2a16c7fefbbb12e54baa\"}\n     * ```\n     * - Type = 4: post feed link\n     * ```\n     * {\n     *   \"type\":4,\n     *   \"link\":\"http://news.zing.vn/Trung-uong-quyet-dinh-phuong-an-nhan-su-cap-cao-post632739.html\",\n     *   \"title\":\"Trung ương quyết định phương án nhân sự cấp cao\",\n     *   \"thumb\": \"xxx\",\n     *   \"description\":\"xxx\",\n     * }\n     * ```\n     * - Type = 5: post feed profile\n     * ```\n     * {\n     *   \"type\":5,\n     *   \"avt\":\"http://s120.avatar.talk.zdn.vn/5/f/9/6/27/120/33a07b66a06fd78ba5e645a750f3d72b.jpg\",\n     *   \"uid\":\"116052312\",\n     *   \"dpn\": \"Galaxy Cinema\",\n     * }\n     * ```\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static openPostFeed(feedInfo, callback) {\n        feedInfo[\"zapp\"] = native_bridge_1.default.getAppId();\n        return native_bridge_1.default.jsCall(config_1.Action.openpostfeed, feedInfo, callback);\n    }\n    /**\n     * Hàm gọi màn hình share lên cho bạn bè, với các thông tin truyền vào\n     * @example\n     * ZJSBridge.Zalo.openShareSheet(sheetInfo, e => {console.log(e)})\n     * @param {object} sheetInfo\n     * - Chia sẻ ảnh\n     * ```\n     * {\"type\":1,\"photoUrl\":\"http://dev.org.zads.zdn.vn/2a16c7fefbbb12e54baa\"}\n     * ```\n     * - Chia sẻ GIF\n     * ```\n     * {\n     *  \"type\":11,\n     *  \"photoUrl\":\"http://dev.org.zads.zdn.vn/2a16c7fefbbb12e54baa\",\n     *  \"gifUrl\":\"http://dev.org.zads.zdn.vn/fc88fe60c2252b7b7234\",\n     *  \"width\":480,\n     *  \"height\":270\n     * }\n     * ```\n     * - Chia sẻ Video\n     * ```\n     * {\n     *   \"type\": 12,\n     *   \"videoThumb\":\"http://dev.org.zads.zdn.vn/fc88fe60c2252b7b7234\",\n     *   \"videoUrl\":\"http://dev.org.zads.zdn.vn/fc88fe60c2252b7b7234\",\n     *   \"width\":480,\n     *   \"height\":270\n     * }\n     * ```\n     * - Chia sẻ link\n     * ```\n     * {\n     *   \"type\": 4,\n     *   \"link\": \"\",\n     *   \"chatOnly\": 1, // tắt bật share lên nhật ký\n     * }\n     * ```\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static openShareSheet(sheetInfo, callback) {\n        sheetInfo[\"zapp\"] = native_bridge_1.default.getAppId();\n        return native_bridge_1.default.jsCall(config_1.Action.opensharesheet, sheetInfo, callback);\n    }\n    /**\n     * Open profile.\n     * @example\n     * ZJSBridge.Zalo.openProfile(data, e => {console.log(e)})\n     * @param {object} data\n     * ```\n     * {\n     *      \"uId\": xxx,\n     *      \"type\": 0 | 1 | 2,\n     *      \"appId\": xxx (appIdNoise),\n     *      \"sourceId\": xxx,\n     *      \"sourceIndex\": xxx\n     * }\n     * ```\n     * - type:\n     *      - 0: Mở page (OA), pageId truyền lên được encode bằng ZCypher, (ZCypher.encodePageId(pageId)).\n     *      - 1: Mở profile User, userId truyền lên được encode bằng ZCypher by AppId.\n     *      - 2: Mở profile OA bằng Alias (field uid truyền lên là alias của OA).\n     * > Trong trường hợp không decode thì client sẽ sử dụng trực tiếp field uId trong options gởi lên để mở profile.\n     * > Nếu có decode thì dữ liệu trả về sẽ là trường uId đã được decode.\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static openProfile(data, callback) {\n        data[\"zapp\"] = native_bridge_1.default.getAppId();\n        return native_bridge_1.default.jsCall(config_1.Action.openprofile, data, callback);\n    }\n    /**\n     * Open feed detail.\n     * @example\n     * ZJSBridge.Zalo.openFeedDetail(data, e => {console.log(e)})\n     * @param {object} data\n     * ```\n     * {\n     *      \"feed_id\": xxx,\n     *      \"owner_id\": xxx\n     * }\n     * ```\n     * > Trong trường hợp không decode thì client sẽ sử dụng trực tiếp field feed_id và owner_id của html5 gởi lên trong options gởi lên để mở feed detail.\n     * > Nếu có decode thì dữ liệu trả về sẽ là trường feed_id và owner_id đã được decode. (ZCypher.encodeFeedId - ZCypher.encodeUserId).\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static openFeedDetail(data, callback) {\n        data[\"zapp\"] = native_bridge_1.default.getAppId();\n        return native_bridge_1.default.jsCall(config_1.Action.openfeeddetail, data, callback);\n    }\n    /**\n     * Open friend rada.\n     * @example\n     * ZJSBridge.Zalo.openFriendRada(e => {console.log(e)})\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static openFriendRada(callback) {\n        return native_bridge_1.default.jsCall(config_1.Action.openfriendrada, {}, callback);\n    }\n    /**\n     * Open page.\n     * @example\n     * ZJSBridge.Zalo.openPage(e => {console.log(e)})\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static openPage(callback) {\n        return native_bridge_1.default.jsCall(config_1.Action.openpage, {}, callback);\n    }\n    /**\n     * Open photo detail.\n     * @example\n     * ZJSBridge.Zalo.openPhotoDetail(data, e => {console.log(e)})\n     * @param {object} data\n     * ```\n     * {\n     *      \"owner_id\": xxx,\n     *      \"photo_id\": xxx\n     * }\n     * ```\n     * > Trong trường hợp không decode thì client sẽ sử dụng trực tiếp field photo_id và owner_id của html5 gởi lên trong options gởi lên để mở game detail.\n     * > Nếu có decode thì dữ liệu trả về sẽ là trường photo_id và owner_id đã được decode. (ZCypherExt.encodePhotoId, ZCypher.encodeUserId).\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static openPhotoDetail(data, callback) {\n        data[\"zapp\"] = native_bridge_1.default.getAppId();\n        return native_bridge_1.default.jsCall(config_1.Action.openphotodetail, data, callback);\n    }\n    /**\n     * Open galary.\n     * @example\n     * ZJSBridge.Zalo.openGalary(data, e => {console.log(e)})\n     * @param {object} data\n     * ```\n     * {\n     *      \"uId\": xxx\n     * }\n     * ```\n     * > Trong trường hợp không decode thì client sẽ sử dụng trực tiếp field uId trong options gởi lên để mở gallery.\n     * > Nếu có decode thì dữ liệu trả về sẽ là trường uId đã được decode. (ZCypher.encodeUserId).\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static openGalary(data, callback) {\n        data[\"zapp\"] = native_bridge_1.default.getAppId();\n        return native_bridge_1.default.jsCall(config_1.Action.opengalary, data, callback);\n    }\n    /**\n     * Open game center.\n     * @example\n     * ZJSBridge.Zalo.openGameCenter(e => {console.log(e)})\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static openGameCenter(callback) {\n        return native_bridge_1.default.jsCall(config_1.Action.opengamecenter, {}, callback);\n    }\n    /**\n     * Open game news.\n     * @example\n     * ZJSBridge.Zalo.openGameNews(e => {console.log(e)})\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static openGameNews(callback) {\n        return native_bridge_1.default.jsCall(config_1.Action.opengamenews, {}, callback);\n    }\n    /**\n     * Open tab social.\n     * @example\n     * ZJSBridge.Zalo.openTabSocial(e => {console.log(e)})\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static openTabSocial(callback) {\n        return native_bridge_1.default.jsCall(config_1.Action.opentabsocial, {}, callback);\n    }\n    /**\n     * Open friend suggest.\n     * @example\n     * ZJSBridge.Zalo.openFriendSuggest(e => {console.log(e)})\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static openFriendSuggest(callback) {\n        return native_bridge_1.default.jsCall(config_1.Action.openfriendsuggest, {}, callback);\n    }\n    /**\n     * Open group list.\n     * @example\n     * ZJSBridge.Zalo.openGroupList(e => {console.log(e)})\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static openGroupList(callback) {\n        return native_bridge_1.default.jsCall(config_1.Action.opengrouplist, {}, callback);\n    }\n    /**\n     * Open nearby.\n     * @example\n     * ZJSBridge.Zalo.openNearby(e => {console.log(e)})\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static openNearby(callback) {\n        return native_bridge_1.default.jsCall(config_1.Action.opennearby, {}, callback);\n    }\n    /**\n     * Open room.\n     * @example\n     * ZJSBridge.Zalo.openRoom(e => {console.log(e)})\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static openRoom(callback) {\n        return native_bridge_1.default.jsCall(config_1.Action.openroom, {}, callback);\n    }\n    /**\n     * Open sticker store.\n     * @example\n     * ZJSBridge.Zalo.openStickerStore(e => {console.log(e)})\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static openStickerStore(callback) {\n        return native_bridge_1.default.jsCall(config_1.Action.openstickerstore, {}, callback);\n    }\n    /**\n     * Open create chat.\n     * @example\n     * ZJSBridge.Zalo.openCreateChat(e => {console.log(e)})\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static openCreateChat(callback) {\n        return native_bridge_1.default.jsCall(config_1.Action.opencreatechat, {}, callback);\n    }\n    /**\n     * Copy link cate sticker.\n     * @example\n     * ZJSBridge.Zalo.copyLinkCateSticker(e => {console.log(e)})\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static copyLinkCateSticker(callback) {\n        return native_bridge_1.default.jsCall(config_1.Action.copylinkcatesticker, {}, callback);\n    }\n    /**\n     * Open chat.\n     * @example\n     * ZJSBridge.Zalo.openChat(data, e => {console.log(e)})\n     * @param {object} data\n     * ```\n     * {\n     *      \"uId\": xxx,\n     *      \"type\": 0 | 1,\n     *      \"appId\": xxx (appIdNoise),\n     *      \"sourceId\": xxx,\n     *      \"sourceIndex\": xxx,\n     *      \"force\": 0 | 1\n     * }\n     * ```\n     * - type:\n     *      - 0: open chat với page (pageId encode bằng ZCypher).\n     *      - 1: open chat với user (userId encode bằng ZCypher theo appId).\n     * > Trong trường hợp không decode thì client sẽ sử dụng trực tiếp field uId trong options gởi lên để mở tab chat.\n     * > Nếu có decode thì dữ liệu trả về sẽ là trường uId đã được decode.\n     * > Giá trị force là 1 (force) hoặc 0 (không force)\"\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static openChat(data, callback) {\n        data[\"zapp\"] = native_bridge_1.default.getAppId();\n        return native_bridge_1.default.jsCall(config_1.Action.openchat, data, callback);\n    }\n    /**\n     * Force open tab chat.\n     * @example\n     * ZJSBridge.Zalo.openTabChat(e => {console.log(e)})\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static openTabChat(callback) {\n        return native_bridge_1.default.jsCall(config_1.Action.opentabchat, {}, callback);\n    }\n    /**\n     * Open add friend.\n     * @example\n     * ZJSBridge.Zalo.openAddFriend(data, e => {console.log(e)})\n     * @param {object} data\n     * ```\n     * {\n     *      \"uid_from\": xxx (encode),\n     *      \"uid_to\": xxx (encode),\n     *      \"source\": xxx\n     * }\n     * ```\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static openAddFriend(data, callback) {\n        data[\"zapp\"] = native_bridge_1.default.getAppId();\n        return native_bridge_1.default.jsCall(config_1.Action.openaddfriend, data, callback);\n    }\n    /**\n     * Open tab more.\n     * @example\n     * ZJSBridge.Zalo.openTabMore(e => {console.log(e)})\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static openTabMore(callback) {\n        return native_bridge_1.default.jsCall(config_1.Action.opentabmore, {}, callback);\n    }\n    /**\n     * Open login devices.\n     * @example\n     * ZJSBridge.Zalo.openLoginDevices(e => {console.log(e)})\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static openLoginDevices(callback) {\n        return native_bridge_1.default.jsCall(config_1.Action.openlogindevices, {}, callback);\n    }\n    /**\n     * Open send sticker.\n     * @example\n     * ZJSBridge.Zalo.openSendSticker(data, e => {console.log(e)})\n     * @param {object} data\n     * ```\n     * {\n     *      \"id\": <int>, // id của sticker được gửi\n     *      \"touserid\": xxx (encode), // id của người cần gửi tới\n     *      \"cateId\": <int>, // category id của bộ sticker\n     *      \"type\": <int>, // loại sticker\n     *      \"autoplay\": 0 | 1, // default sẽ là 1. Không có field này cũng sẽ giữ logic cũ là auto play 1.\n     *      \"msg\": \"Hello guys\",\n     *      \"mentions\": [],\n     *      \"stickerList\": [\n     *          {\n     *              \"id\": <int>,\n     *              \"catId\": <int>,\n     *              \"type\": <int>,\n     *              \"autoplay\": 0 | 1\n     *          }\n     *      ]\n     * }\n     * ```\n     * - autoplay:\n     *      - default sẽ là 1. Không có field này cũng sẽ giữ logic cũ là auto play 1.\n     *      - 0 sẽ dùng cho Full Screen Sticker LUA. Kịch bản gửi lại quà khi nhận được 1 con LUA mới. Nếu không muốn autoplay back\n     * - \"msg\" + \"mentions\" sử dụng khi muốn gửi kèm msg text có mention (đang dùng cho msg ecard sinh nhật trong group).\n     * - \"stickerList\" nếu có sẽ lấy random 1 trong các sticker để gửi đi thay vì sticker id default ở cấp ngoài.\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static openSendSticker(data, callback) {\n        data[\"zapp\"] = native_bridge_1.default.getAppId();\n        return native_bridge_1.default.jsCall(config_1.Action.opensendsticker, data, callback);\n    }\n    /**\n     * Report abuse.\n     * @example\n     * ZJSBridge.Zalo.reportAbuse(data, e => {console.log(e)})\n     * @param {object} data\n     * ```\n     * {\n     *      \"uidto\": xxx, // uid cua user or OA\n     *      \"type\": <int>,\n     *      \"objectid\": xxx,\n     *      \"message\": \"\",\n     * }\n     * ```\n     * - type: hiện chỉ đang support type 2, 5\n     *      - REPORT_PHOTO 1 (uid = photoOwnerUid, objectId = photoId)\n     *      - REPORT_PROFILE 2 (uid = profileUid, objectId = \"\"\"\")\n     *      - REPORT_SPAM 3 (uid = profileUid)\n     *      - REPORT_SPAM_IN_ROOM 4 (uid = senderUid, objectId = roomId)\n     *      - REPORT_VIP_PROFILE 5 (uid = OA uid, objectId = \"\"\"\")\n     *      - REPORT_VIP_FEED 6 (uid = feedOwnerUid, objectId = feedId)\n     *      - REPORT_NORMAL_FEED 7 (uid = feedOwnerUid, objectId = feedId)\n     *      - REPORT_FEED_COMMENT 8  (uid = feedOwnerUid, objectId = feedId, reportMsg = commendUid)\n     *      - REPORT_SPAM_WIFI_ROOM 9 (uid = photoOwnerUid, objectId = globalMsgId)\n     *      - REPORT_LINK 10  (reportMsg = url bị report)\n     *      - REPORT_STORY 11) (uid = storyOwnerUid, objectId = storyId)\"\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static reportAbuse(data, callback) {\n        data[\"zapp\"] = native_bridge_1.default.getAppId();\n        return native_bridge_1.default.jsCall(config_1.Action.reportabuse, data, callback);\n    }\n    /**\n     * Follow OA.\n     * @example\n     * ZJSBridge.Zalo.followOA(data, e => {console.log(e)})\n     * @param {object} data\n     * ```\n     * {\n     *      \"uid\": xxx // encode PageId\n     * }\n     * ```\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static followOA(data, callback) {\n        data[\"zapp\"] = native_bridge_1.default.getAppId();\n        return native_bridge_1.default.jsCall(config_1.Action.followoa, data, callback);\n    }\n    /**\n     * Unfollow OA.\n     * @example\n     * ZJSBridge.Zalo.unfollowOA(data, e => {console.log(e)})\n     * @param {object} data\n     * ```\n     * {\n     *      \"uid\": xxx // encode PageId\n     * }\n     * ```\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static unfollowOA(data, callback) {\n        data[\"zapp\"] = native_bridge_1.default.getAppId();\n        return native_bridge_1.default.jsCall(config_1.Action.unfollowoa, data, callback);\n    }\n    /**\n     * Open game detail.\n     * @example\n     * ZJSBridge.Zalo.openGameDetail(data, e => {console.log(e)})\n     * @param {object} data\n     * ```\n     * {\n     *      \"zapp_id\": xxx,\n     *      \"package\": \"gsn.game.zingplaynew1\"\n     * }\n     * ```\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static openGameDetail(data, callback) {\n        return native_bridge_1.default.jsCall(config_1.Action.opengamedetail, data, callback);\n    }\n    /**\n     * Dùng cho H5 chủ động request camera permission.\n     * @example\n     * ZJSBridge.Zalo.requestCamera(e => {console.log(e)})\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     * ```\n     * {\n     *      \"error_code\": 0,\n     *      \"error_message\": \"User accepted\",\n     * }\n     *```\n     * Error code define:\n     * -  0: User accepted\n     * -  1: App had permission before\n     * - -1: Unknown error\n     * - -2: User denied\n     */\n    static requestCamera(callback) {\n        return native_bridge_1.default.jsCall(config_1.Action.requestcamera, {}, callback);\n    }\n    /**\n     * Mở Mini App\n     * @example\n     * ZJSBridge.Zalo.openMiniApp(data, e => {console.log(e)})\n     * @param {object} data\n     * ```\n     * {\n     *      \"appId\": \"\",\n     *      \"params\": {\n     *          \"key\": \"value\"\n     *      }\n     * }\n     * ```\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static openMiniApp(data, callback) {\n        const appId = data === null || data === void 0 ? void 0 : data.appId;\n        const params = (data === null || data === void 0 ? void 0 : data.params) || {};\n        const queryParamString = Object.entries(params)\n            .map(function ([key, value]) {\n            return [key, value].join(\"=\");\n        })\n            .join(\"&\");\n        return native_bridge_1.default.jsCall(config_1.Action.open_mp, {\n            mpUrl: `https://h5.zdn.vn/zapps/${appId}/${queryParamString.length > 0 ? \"?\" + queryParamString : \"\"}`,\n            mpInfo: {\n                appId: appId,\n            },\n        }, callback);\n    }\n}\nexports.default = Zalo;\n"]},"metadata":{},"sourceType":"script"}