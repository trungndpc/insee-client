{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ObjectAssign = require(\"object-assign\");\n\nconst config_1 = require(\"./config\");\n\nconst native_bridge_1 = require(\"./utils/native-bridge\");\n\nconst zalo_1 = require(\"./zalo\");\n\nconst device_1 = require(\"./device\");\n\nconst h5_1 = require(\"./h5\");\n\nconst misc_1 = require(\"./misc\");\n\nconst ads_1 = require(\"./ads\");\n\nconst auth_1 = require(\"./utils/auth\");\n\nconst CommonUtils = require(\"./utils/common\");\n\nclass ZJSBridge {\n  getVersion() {\n    return SDK_VERSION;\n  }\n\n  onJSCall(key) {\n    return function (data) {\n      native_bridge_1.default.onJSCall(key, data);\n    };\n  }\n\n  onMultiJSCall(key) {\n    return function (data) {\n      native_bridge_1.default.onMultiJSCall(key, data);\n    };\n  }\n\n  login(callback) {\n    const loginCallBack = res => {\n      try {\n        auth_1.default.getAccessToken(callback);\n\n        if (0 == res.error_code && res.hasOwnProperty(\"data\")) {\n          const cookies = res.data && res.data.cookiesOAuthLogins;\n          Array.isArray(cookies) && cookies.forEach(e => {\n            if (e.name == \"h5.zdn.vn_zacc_session\") {\n              native_bridge_1.default.setAccessToken(e.value);\n            }\n\n            if (e.name == \"h5.zdn.vn_zlink3rd\") {\n              native_bridge_1.default.setJSToken(e.value);\n            }\n          });\n        }\n      } catch (error) {\n        console.log(error);\n        return callback(null);\n      }\n    };\n\n    native_bridge_1.default.jsCall(config_1.Action.login, {}, loginCallBack, true);\n  }\n\n  callCustomAction(action, data, callback, isMultiCallback = true, nRetry = 3, haveTimeout = true) {\n    native_bridge_1.default.jsCall(action, data, callback, isMultiCallback, nRetry, haveTimeout);\n  }\n  /**\n   * Đăng ký dữ liệu trả về khi có event từ ZaloApp gọi xuống H5\n   * @example\n   * ZJSBridge.registerListenerEvent(\"h5.event.action.close\", '{\"handle_h5\": 1}', () => {console.log(\"Webview close\")})\n   * @param {string} eventName Tên event: h5.event.action.close\n   * @param {string} dataCallBack\n   * @param {void} handler\n   */\n\n\n  registerListenerEvent(eventName, dataCallBack, handler) {\n    native_bridge_1.default.registerListenerEvent(eventName, dataCallBack, handler);\n  }\n\n  onCloseWebview(callback) {\n    this.registerListenerEvent(\"h5.event.action.close\", '{\"handle_h5\": 1}', callback);\n  }\n\n  nativeEventHandler(eventId, eventName, eventData) {\n    native_bridge_1.default.nativeEventHandler(eventId, eventName, eventData);\n  }\n\n  setZAccSession(value) {\n    native_bridge_1.default.setAccessToken(value);\n  }\n\n  setJSToken(value) {\n    native_bridge_1.default.setJSToken(value);\n  }\n\n  getCookie(name) {\n    return CommonUtils.readCookie(name);\n  }\n\n  getCookieFallback(name) {\n    return CommonUtils.readCookieFallback(name);\n  }\n\n}\n\nconst zjsbridge = new ZJSBridge();\nexports.default = ObjectAssign(zjsbridge, {\n  Zalo: zalo_1.default,\n  Device: device_1.default,\n  H5: h5_1.default,\n  Misc: misc_1.default,\n  Ads: ads_1.default\n});\nwindow.ZJSBridge = ObjectAssign(zjsbridge, {\n  Zalo: zalo_1.default,\n  Device: device_1.default,\n  H5: h5_1.default,\n  Misc: misc_1.default,\n  Ads: ads_1.default\n});\nwindow.zaloJSV2 = {\n  getCookieFallback: CommonUtils.getToken,\n  zalo_h5_event_handler: function (eventId, eventName, eventData) {\n    zjsbridge.nativeEventHandler(eventId, eventName, eventData);\n  },\n  webviewInvisible: function (data) {\n    console.log(\"webviewInvisible\", data);\n  }\n};","map":{"version":3,"sources":["/home/trungnd2/Downloads/insee-client/node_modules/zalo-js-bridge/lib/index.js"],"names":["Object","defineProperty","exports","value","ObjectAssign","require","config_1","native_bridge_1","zalo_1","device_1","h5_1","misc_1","ads_1","auth_1","CommonUtils","ZJSBridge","getVersion","SDK_VERSION","onJSCall","key","data","default","onMultiJSCall","login","callback","loginCallBack","res","getAccessToken","error_code","hasOwnProperty","cookies","cookiesOAuthLogins","Array","isArray","forEach","e","name","setAccessToken","setJSToken","error","console","log","jsCall","Action","callCustomAction","action","isMultiCallback","nRetry","haveTimeout","registerListenerEvent","eventName","dataCallBack","handler","onCloseWebview","nativeEventHandler","eventId","eventData","setZAccSession","getCookie","readCookie","getCookieFallback","readCookieFallback","zjsbridge","Zalo","Device","H5","Misc","Ads","window","zaloJSV2","getToken","zalo_h5_event_handler","webviewInvisible"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ObjectAssign = require(\"object-assign\");\nconst config_1 = require(\"./config\");\nconst native_bridge_1 = require(\"./utils/native-bridge\");\nconst zalo_1 = require(\"./zalo\");\nconst device_1 = require(\"./device\");\nconst h5_1 = require(\"./h5\");\nconst misc_1 = require(\"./misc\");\nconst ads_1 = require(\"./ads\");\nconst auth_1 = require(\"./utils/auth\");\nconst CommonUtils = require(\"./utils/common\");\nclass ZJSBridge {\n    getVersion() {\n        return SDK_VERSION;\n    }\n    onJSCall(key) {\n        return function (data) {\n            native_bridge_1.default.onJSCall(key, data);\n        };\n    }\n    onMultiJSCall(key) {\n        return function (data) {\n            native_bridge_1.default.onMultiJSCall(key, data);\n        };\n    }\n    login(callback) {\n        const loginCallBack = (res) => {\n            try {\n                auth_1.default.getAccessToken(callback);\n                if (0 == res.error_code && res.hasOwnProperty(\"data\")) {\n                    const cookies = res.data && res.data.cookiesOAuthLogins;\n                    Array.isArray(cookies) && cookies.forEach(e => {\n                        if (e.name == \"h5.zdn.vn_zacc_session\") {\n                            native_bridge_1.default.setAccessToken(e.value);\n                        }\n                        if (e.name == \"h5.zdn.vn_zlink3rd\") {\n                            native_bridge_1.default.setJSToken(e.value);\n                        }\n                    });\n                }\n            }\n            catch (error) {\n                console.log(error);\n                return callback(null);\n            }\n        };\n        native_bridge_1.default.jsCall(config_1.Action.login, {}, loginCallBack, true);\n    }\n    callCustomAction(action, data, callback, isMultiCallback = true, nRetry = 3, haveTimeout = true) {\n        native_bridge_1.default.jsCall(action, data, callback, isMultiCallback, nRetry, haveTimeout);\n    }\n    /**\n     * Đăng ký dữ liệu trả về khi có event từ ZaloApp gọi xuống H5\n     * @example\n     * ZJSBridge.registerListenerEvent(\"h5.event.action.close\", '{\"handle_h5\": 1}', () => {console.log(\"Webview close\")})\n     * @param {string} eventName Tên event: h5.event.action.close\n     * @param {string} dataCallBack\n     * @param {void} handler\n     */\n    registerListenerEvent(eventName, dataCallBack, handler) {\n        native_bridge_1.default.registerListenerEvent(eventName, dataCallBack, handler);\n    }\n    onCloseWebview(callback) {\n        this.registerListenerEvent(\"h5.event.action.close\", '{\"handle_h5\": 1}', callback);\n    }\n    nativeEventHandler(eventId, eventName, eventData) {\n        native_bridge_1.default.nativeEventHandler(eventId, eventName, eventData);\n    }\n    setZAccSession(value) {\n        native_bridge_1.default.setAccessToken(value);\n    }\n    setJSToken(value) {\n        native_bridge_1.default.setJSToken(value);\n    }\n    getCookie(name) {\n        return CommonUtils.readCookie(name);\n    }\n    getCookieFallback(name) {\n        return CommonUtils.readCookieFallback(name);\n    }\n}\nconst zjsbridge = new ZJSBridge();\nexports.default = ObjectAssign(zjsbridge, {\n    Zalo: zalo_1.default,\n    Device: device_1.default,\n    H5: h5_1.default,\n    Misc: misc_1.default,\n    Ads: ads_1.default,\n});\nwindow.ZJSBridge = ObjectAssign(zjsbridge, {\n    Zalo: zalo_1.default,\n    Device: device_1.default,\n    H5: h5_1.default,\n    Misc: misc_1.default,\n    Ads: ads_1.default,\n});\nwindow.zaloJSV2 = {\n    getCookieFallback: CommonUtils.getToken,\n    zalo_h5_event_handler: function (eventId, eventName, eventData) {\n        zjsbridge.nativeEventHandler(eventId, eventName, eventData);\n    },\n    webviewInvisible: function (data) {\n        console.log(\"webviewInvisible\", data);\n    }\n};\n"]},"metadata":{},"sourceType":"script"}