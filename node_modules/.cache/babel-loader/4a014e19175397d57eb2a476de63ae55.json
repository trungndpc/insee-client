{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst native_bridge_1 = require(\"./utils/native-bridge\");\n\nconst config_1 = require(\"./config\");\n/**\n * Class chứa các action liên quan đến webview\n */\n\n\nclass Device {\n  /**\n   * Open app store. Note: Trong trường hợp không decode thì client sử dụng trực tiếp field url trong options. Đối với iOS , khi ituneId > 0 thì mở embbedStore\n   * @example\n   * var data = {\n   *           \"android\" :{\n   *               \"url\" : \"http://xxx.xxx\"\n   *           },\n   *           \"ios\" : {\n   *               \"url\": \"http://xxx.xxx\",\n   *               \"scheme_url\" :  \"zalo-1396017800851131651://\",\n   *               \"itunes_id\" : 0\n   *           },\n   *           \"wp_data\" : {\n   *               \"url\": \"http://xxx.xxx\"\n   *           }\n   *       }\n   * ZJSBridge.Device.openAppStore(data)\n   * @param {object} data\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n  static openAppStore(data, callback = data => {}) {\n    return native_bridge_1.default.jsCall(config_1.Action.openappstore, data, callback);\n  }\n  /**\n   * Get location\n   * @example\n   * ZJSBridge.Device.getLocation(false, \"App cần quyền location để chạy chức năng này\", e => {console.log(e)})\n   * @param {boolean} silentRequest optional -- mặc định là false, khi true thì sẽ request ngầm, có quyền thì lấy, không thì thôi, không xin quyền\n   * @param {string} permissionDescription permission descrition\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static getLocation(silentRequest = false, permissionDescription = \"\", callback) {\n    return native_bridge_1.default.jsCall(config_1.Action.getlocation, {\n      silent_request: silentRequest,\n      permission_description: permissionDescription\n    }, callback, true);\n  }\n  /**\n   * Open App.\n   * Note:\n   * - Trường hợp app đã cài thì mở app, ngược lại thì mở url trả về.\n   * - Trong data: appinfo nghĩa là:\n   *      - Nếu android thì là package\n   *      - ios là scheme_url\n   *      - windowsphone là protocol_url\n   * - Trường hợp không decode thì client sẽ sử dụng appinfo hoặc url trong options để mở app.\n   * - Trường hợp có decode thì trong data trả về sẽ chứa những trường như define bên cạnh. Trong đó:\n   *      - Trong data ios trả về, itunes_id sẽ thay thế cho trường appId.\n   *      - Mỗi platform sẽ có thêm url trong data trả về là link open store nếu app chưa được installed. (để tracking)\n   * - Khi mở app với ios phần extra_data sẽ được gắn vào schema:\n   * > VD: zalo-1396017800851131651://[any_uri_in_there]\n   * - Khi mở app bằng android extUrl sẽ được truyền thêm qua app bằng hàm intent.setData(Uri.parse(extUrl));\n   * @example\n   * # Đường web\n   * var data = {\n   *              \"android\": {\n   *                  \"package\": \"gsn.game.zingplaynew1\",\n   *                  \"extUrl\": \"any_uri_in_there\",\n   *                  \"url\": \"http://app.zaloapp.com/gsn.game.zingplaynew1?pid=zalo&c=gamecenter\"\n   *              },\n   *              \"ios\": {\n   *                  \"itunes_id\": 0,\n   *                  \"scheme_url\": \"zalo-1396017800851131651://[any_uri_in_there]\",\n   *                  \"ur l\": \"http://app.zaloapp.com/id908617867?pid=zalo&c=gamecenter\"\n   *              },\n   *              \"wp_data\": {\n   *                  \"protocol_url\": \"zalo-1396017800851131651://\",\n   *                  \"url\": \"http://www.windowsphone.com/s?  appid=4e4dc260-6cdb-4f35-bbd7-9deb2ef4ea2f\"\n   *              }\n   *          }\n   * # Đường khác\n   * var data = {\n   *              \"android\": \"gsn.game.zingplaynew1\"\n   *          }\n   * ZJSBridge.Device.openApp(data)\n   * @param {object} data\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static openApp(data, callback = data => {}) {\n    return native_bridge_1.default.jsCall(config_1.Action.openapp, data, callback);\n  }\n  /**\n   * Config rotate\n   * @example\n   * ZJSBridge.Device.configRotate(0, e => {console.log(e)})\n   * @param {(0|1|2|3)} rotate 0: default, 1: sensor, 2: force portrait, 3: force landscape\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static configRotate(rotate, callback) {\n    return native_bridge_1.default.jsCall(config_1.Action.autorotate, {\n      autoRotate: rotate\n    }, callback);\n  }\n  /**\n   * Show toast\n   * @example\n   * ZJSBridge.Device.showToast(\"Message\", e => {console.log(e)})\n   * @param {string} message message that need to show\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static showToast(message, callback) {\n    return native_bridge_1.default.jsCall(config_1.Action.showtoast, {\n      toast: message\n    }, callback);\n  }\n  /**\n   * Query location hide\n   * @example\n   * ZJSBridge.Device.queryLocationHide(\"I'm here!\", \"68966266\", e => {console.log(e)})\n   * @param {string} title\n   * @param {string} touserid\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static queryLocationHide(title, touserid, callback) {\n    const params = {\n      title: title,\n      touserid: touserid,\n      zapp: native_bridge_1.default.getAppId()\n    };\n    return native_bridge_1.default.jsCall(config_1.Action.querylocationhide, params, callback);\n  }\n  /**\n   * Hide keyboard.\n   * @example\n   * ZJSBridge.Device.hideKeyboard(e => {console.log(e)})\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static hideKeyboard(callback) {\n    return native_bridge_1.default.jsCall(config_1.Action.hidekeyboard, {}, callback);\n  }\n  /**\n   * Open phone.\n   * @example\n   * ZJSBridge.Device.openPhone({\"phoneNum\":\"+84123456789\"})\n   * @param {object} data\n   * - Data đường socket notify:\n   * > {\"phoneNum\":\"+84123456789\"}\n   * - Data các đường khác:\n   * > {\"phoneCode\":\"+84123456789\"}\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static openPhone(data, callback = data => {}) {\n    return native_bridge_1.default.jsCall(config_1.Action.openphone, data, callback);\n  }\n  /**\n   * Open QR.\n   * @example\n   * ZJSBridge.Device.openQr(e => {console.log(e)})\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static openQr(callback) {\n    return native_bridge_1.default.jsCall(config_1.Action.openqr, {}, callback);\n  }\n  /**\n   * View Current QR.\n   * @example\n   * ZJSBridge.Device.currentUserQr(e => {console.log(e)})\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static currentUserQr(callback) {\n    return native_bridge_1.default.jsCall(config_1.Action.currentUserQr, {}, callback);\n  }\n  /**\n   * Open SMS.\n   * @example\n   * ZJSBridge.Device.openSMS(\"content\", \"+84123456789\")\n   * @param {string} content\n   * @param {string} phoneCode\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static openSMS(content, phoneCode, callback = data => {}) {\n    return native_bridge_1.default.jsCall(config_1.Action.opensms, {\n      content,\n      phoneCode\n    }, callback);\n  }\n  /**\n   * View QR.\n   * @example\n   * ZJSBridge.Device.viewQr(\"123456\", \"ABC\", e => {console.log(e)})\n   * @param {string} uid\n   * @param {string} dpn\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static viewQr(uid, dpn, callback) {\n    const params = {\n      uid: uid,\n      dpn: dpn,\n      zapp: native_bridge_1.default.getAppId()\n    };\n    return native_bridge_1.default.jsCall(config_1.Action.viewqr, params, callback);\n  }\n  /**\n   * Keep screen.\n   * @example\n   * ZJSBridge.Device.keepScreen(1, e => {console.log(e)})\n   * @param {0|1} keep_screen_on\n   * - \"keep_screen_on\": 1 // Gọi khi play video in web. Client sẽ keep screen on\n   * - \"keep_screen_on\": 0 // Gọi khi stop video in web. Client sẽ không keep screen on nữa.\n   * - Khi ra khỏi web client sẽ trả về \"keep_screen_on\": 0. Tránh TH màn hình sẽ sáng hoài.\n   * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n   */\n\n\n  static keepScreen(keep_screen_on, callback) {\n    const value = Number(keep_screen_on);\n    return native_bridge_1.default.jsCall(config_1.Action.keepscreen, {\n      data: {\n        keep_screen_on: value\n      }\n    }, callback);\n  }\n  /**\n   * Get Language\n   * @example\n   * ZJSBridge.Device.getLanguage()\n   * @returns {string} language\n   */\n\n\n  static getLanguage() {\n    var cookies = document.cookie;\n    return cookies.replace(/(?:(?:^|.*;\\s*)zlanguage\\s*=\\s*([^;]*).*$)|^.*$/, \"$1\") || cookies.replace(/(?:(?:^|.*;\\s*)language\\s*=\\s*([^;]*).*$)|^.*$/, \"$1\");\n  }\n\n}\n\nexports.default = Device;","map":{"version":3,"sources":["/home/trungnd2/Downloads/insee-client/node_modules/zalo-js-bridge/lib/device.js"],"names":["Object","defineProperty","exports","value","native_bridge_1","require","config_1","Device","openAppStore","data","callback","default","jsCall","Action","openappstore","getLocation","silentRequest","permissionDescription","getlocation","silent_request","permission_description","openApp","openapp","configRotate","rotate","autorotate","autoRotate","showToast","message","showtoast","toast","queryLocationHide","title","touserid","params","zapp","getAppId","querylocationhide","hideKeyboard","hidekeyboard","openPhone","openphone","openQr","openqr","currentUserQr","openSMS","content","phoneCode","opensms","viewQr","uid","dpn","viewqr","keepScreen","keep_screen_on","Number","keepscreen","getLanguage","cookies","document","cookie","replace"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst native_bridge_1 = require(\"./utils/native-bridge\");\nconst config_1 = require(\"./config\");\n/**\n * Class chứa các action liên quan đến webview\n */\nclass Device {\n    /**\n     * Open app store. Note: Trong trường hợp không decode thì client sử dụng trực tiếp field url trong options. Đối với iOS , khi ituneId > 0 thì mở embbedStore\n     * @example\n     * var data = {\n     *           \"android\" :{\n     *               \"url\" : \"http://xxx.xxx\"\n     *           },\n     *           \"ios\" : {\n     *               \"url\": \"http://xxx.xxx\",\n     *               \"scheme_url\" :  \"zalo-1396017800851131651://\",\n     *               \"itunes_id\" : 0\n     *           },\n     *           \"wp_data\" : {\n     *               \"url\": \"http://xxx.xxx\"\n     *           }\n     *       }\n     * ZJSBridge.Device.openAppStore(data)\n     * @param {object} data\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static openAppStore(data, callback = (data) => { }) {\n        return native_bridge_1.default.jsCall(config_1.Action.openappstore, data, callback);\n    }\n    /**\n     * Get location\n     * @example\n     * ZJSBridge.Device.getLocation(false, \"App cần quyền location để chạy chức năng này\", e => {console.log(e)})\n     * @param {boolean} silentRequest optional -- mặc định là false, khi true thì sẽ request ngầm, có quyền thì lấy, không thì thôi, không xin quyền\n     * @param {string} permissionDescription permission descrition\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static getLocation(silentRequest = false, permissionDescription = \"\", callback) {\n        return native_bridge_1.default.jsCall(config_1.Action.getlocation, {\n            silent_request: silentRequest,\n            permission_description: permissionDescription,\n        }, callback, true);\n    }\n    /**\n     * Open App.\n     * Note:\n     * - Trường hợp app đã cài thì mở app, ngược lại thì mở url trả về.\n     * - Trong data: appinfo nghĩa là:\n     *      - Nếu android thì là package\n     *      - ios là scheme_url\n     *      - windowsphone là protocol_url\n     * - Trường hợp không decode thì client sẽ sử dụng appinfo hoặc url trong options để mở app.\n     * - Trường hợp có decode thì trong data trả về sẽ chứa những trường như define bên cạnh. Trong đó:\n     *      - Trong data ios trả về, itunes_id sẽ thay thế cho trường appId.\n     *      - Mỗi platform sẽ có thêm url trong data trả về là link open store nếu app chưa được installed. (để tracking)\n     * - Khi mở app với ios phần extra_data sẽ được gắn vào schema:\n     * > VD: zalo-1396017800851131651://[any_uri_in_there]\n     * - Khi mở app bằng android extUrl sẽ được truyền thêm qua app bằng hàm intent.setData(Uri.parse(extUrl));\n     * @example\n     * # Đường web\n     * var data = {\n     *              \"android\": {\n     *                  \"package\": \"gsn.game.zingplaynew1\",\n     *                  \"extUrl\": \"any_uri_in_there\",\n     *                  \"url\": \"http://app.zaloapp.com/gsn.game.zingplaynew1?pid=zalo&c=gamecenter\"\n     *              },\n     *              \"ios\": {\n     *                  \"itunes_id\": 0,\n     *                  \"scheme_url\": \"zalo-1396017800851131651://[any_uri_in_there]\",\n     *                  \"ur l\": \"http://app.zaloapp.com/id908617867?pid=zalo&c=gamecenter\"\n     *              },\n     *              \"wp_data\": {\n     *                  \"protocol_url\": \"zalo-1396017800851131651://\",\n     *                  \"url\": \"http://www.windowsphone.com/s?  appid=4e4dc260-6cdb-4f35-bbd7-9deb2ef4ea2f\"\n     *              }\n     *          }\n     * # Đường khác\n     * var data = {\n     *              \"android\": \"gsn.game.zingplaynew1\"\n     *          }\n     * ZJSBridge.Device.openApp(data)\n     * @param {object} data\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static openApp(data, callback = (data) => { }) {\n        return native_bridge_1.default.jsCall(config_1.Action.openapp, data, callback);\n    }\n    /**\n     * Config rotate\n     * @example\n     * ZJSBridge.Device.configRotate(0, e => {console.log(e)})\n     * @param {(0|1|2|3)} rotate 0: default, 1: sensor, 2: force portrait, 3: force landscape\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static configRotate(rotate, callback) {\n        return native_bridge_1.default.jsCall(config_1.Action.autorotate, { autoRotate: rotate }, callback);\n    }\n    /**\n     * Show toast\n     * @example\n     * ZJSBridge.Device.showToast(\"Message\", e => {console.log(e)})\n     * @param {string} message message that need to show\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static showToast(message, callback) {\n        return native_bridge_1.default.jsCall(config_1.Action.showtoast, { toast: message }, callback);\n    }\n    /**\n     * Query location hide\n     * @example\n     * ZJSBridge.Device.queryLocationHide(\"I'm here!\", \"68966266\", e => {console.log(e)})\n     * @param {string} title\n     * @param {string} touserid\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static queryLocationHide(title, touserid, callback) {\n        const params = {\n            title: title,\n            touserid: touserid,\n            zapp: native_bridge_1.default.getAppId(),\n        };\n        return native_bridge_1.default.jsCall(config_1.Action.querylocationhide, params, callback);\n    }\n    /**\n     * Hide keyboard.\n     * @example\n     * ZJSBridge.Device.hideKeyboard(e => {console.log(e)})\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static hideKeyboard(callback) {\n        return native_bridge_1.default.jsCall(config_1.Action.hidekeyboard, {}, callback);\n    }\n    /**\n     * Open phone.\n     * @example\n     * ZJSBridge.Device.openPhone({\"phoneNum\":\"+84123456789\"})\n     * @param {object} data\n     * - Data đường socket notify:\n     * > {\"phoneNum\":\"+84123456789\"}\n     * - Data các đường khác:\n     * > {\"phoneCode\":\"+84123456789\"}\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static openPhone(data, callback = (data) => { }) {\n        return native_bridge_1.default.jsCall(config_1.Action.openphone, data, callback);\n    }\n    /**\n     * Open QR.\n     * @example\n     * ZJSBridge.Device.openQr(e => {console.log(e)})\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static openQr(callback) {\n        return native_bridge_1.default.jsCall(config_1.Action.openqr, {}, callback);\n    }\n    /**\n     * View Current QR.\n     * @example\n     * ZJSBridge.Device.currentUserQr(e => {console.log(e)})\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static currentUserQr(callback) {\n        return native_bridge_1.default.jsCall(config_1.Action.currentUserQr, {}, callback);\n    }\n    /**\n     * Open SMS.\n     * @example\n     * ZJSBridge.Device.openSMS(\"content\", \"+84123456789\")\n     * @param {string} content\n     * @param {string} phoneCode\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static openSMS(content, phoneCode, callback = (data) => { }) {\n        return native_bridge_1.default.jsCall(config_1.Action.opensms, { content, phoneCode }, callback);\n    }\n    /**\n     * View QR.\n     * @example\n     * ZJSBridge.Device.viewQr(\"123456\", \"ABC\", e => {console.log(e)})\n     * @param {string} uid\n     * @param {string} dpn\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static viewQr(uid, dpn, callback) {\n        const params = {\n            uid: uid,\n            dpn: dpn,\n            zapp: native_bridge_1.default.getAppId(),\n        };\n        return native_bridge_1.default.jsCall(config_1.Action.viewqr, params, callback);\n    }\n    /**\n     * Keep screen.\n     * @example\n     * ZJSBridge.Device.keepScreen(1, e => {console.log(e)})\n     * @param {0|1} keep_screen_on\n     * - \"keep_screen_on\": 1 // Gọi khi play video in web. Client sẽ keep screen on\n     * - \"keep_screen_on\": 0 // Gọi khi stop video in web. Client sẽ không keep screen on nữa.\n     * - Khi ra khỏi web client sẽ trả về \"keep_screen_on\": 0. Tránh TH màn hình sẽ sáng hoài.\n     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action\n     */\n    static keepScreen(keep_screen_on, callback) {\n        const value = Number(keep_screen_on);\n        return native_bridge_1.default.jsCall(config_1.Action.keepscreen, {\n            data: {\n                keep_screen_on: value,\n            },\n        }, callback);\n    }\n    /**\n     * Get Language\n     * @example\n     * ZJSBridge.Device.getLanguage()\n     * @returns {string} language\n     */\n    static getLanguage() {\n        var cookies = document.cookie;\n        return (cookies.replace(/(?:(?:^|.*;\\s*)zlanguage\\s*=\\s*([^;]*).*$)|^.*$/, \"$1\") ||\n            cookies.replace(/(?:(?:^|.*;\\s*)language\\s*=\\s*([^;]*).*$)|^.*$/, \"$1\"));\n    }\n}\nexports.default = Device;\n"]},"metadata":{},"sourceType":"script"}