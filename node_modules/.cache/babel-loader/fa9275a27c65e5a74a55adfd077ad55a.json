{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst query_string_1 = require(\"./query-string\");\n\nconst wrapper_fn_1 = require(\"./wrapper-fn\");\n\nvar ERROR = {\n  error: {\n    code: 1,\n    error_subcode: 1357046,\n    message: \"Received Invalid JSON reply.\",\n    type: \"http\"\n  }\n};\n\nfunction safelyParseResponse(rawResponse) {\n  try {\n    return rawResponse === null ? ERROR : JSON.parse(rawResponse);\n  } catch (ex) {\n    return ERROR;\n  }\n}\n\nfunction createCORSRequest(method, url) {\n  if (!self.XMLHttpRequest) {\n    return null;\n  }\n\n  var xhr = new XMLHttpRequest();\n\n  var noop = function noop() {};\n\n  if (\"withCredentials\" in xhr) {\n    xhr.open(method, url, true);\n    xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n  } else {\n    return null;\n  }\n\n  var wrapper = {\n    send: function send(data) {\n      xhr.send(data);\n    }\n  };\n  var onload = wrapper_fn_1.default(function () {\n    onload = noop;\n\n    if (\"onload\" in wrapper) {\n      wrapper.onload(xhr);\n    }\n  }, \"entry\", \"XMLHttpRequest:load\");\n  var onerror = wrapper_fn_1.default(function () {\n    onerror = noop;\n\n    if (\"onerror\" in wrapper) {\n      wrapper.onerror(xhr);\n    }\n  }, \"entry\", \"XMLHttpRequest:error\");\n\n  xhr.onload = function () {\n    onload();\n  };\n\n  xhr.onerror = function () {\n    onerror();\n  };\n\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState == 4) {\n      if (xhr.status == 200) {\n        onload();\n      } else {\n        onerror();\n      }\n    }\n  };\n\n  return wrapper;\n}\n\nfunction execute(url, method, params, cb) {\n  params.suppress_http_code = 1;\n  var data = query_string_1.default.encode(params);\n\n  if (method != \"post\") {\n    url = query_string_1.default.appendToUrl(url, data);\n    data = \"\";\n  }\n\n  var request = createCORSRequest(method, url);\n\n  if (!request) {\n    return false;\n  }\n\n  request.onload = function (xhr) {\n    cb(safelyParseResponse(xhr.responseText));\n  };\n\n  request.onerror = function (xhr) {\n    if (xhr.responseText) {\n      cb(safelyParseResponse(xhr.responseText));\n    } else {\n      cb({\n        error: {\n          code: 1,\n          error_subcode: 1357045,\n          message: \"unknown error (empty response)\",\n          status: xhr.status,\n          type: \"http\"\n        }\n      });\n    }\n  };\n\n  request.send(data);\n  return true;\n}\n\nvar CORSRequest = {\n  execute: execute\n};\nexports.default = CORSRequest;","map":{"version":3,"sources":["/home/trungnd2/Downloads/insee-client/node_modules/zalo-js-bridge/lib/utils/request.js"],"names":["Object","defineProperty","exports","value","query_string_1","require","wrapper_fn_1","ERROR","error","code","error_subcode","message","type","safelyParseResponse","rawResponse","JSON","parse","ex","createCORSRequest","method","url","self","XMLHttpRequest","xhr","noop","open","setRequestHeader","wrapper","send","data","onload","default","onerror","onreadystatechange","readyState","status","execute","params","cb","suppress_http_code","encode","appendToUrl","request","responseText","CORSRequest"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst query_string_1 = require(\"./query-string\");\nconst wrapper_fn_1 = require(\"./wrapper-fn\");\nvar ERROR = {\n    error: {\n        code: 1,\n        error_subcode: 1357046,\n        message: \"Received Invalid JSON reply.\",\n        type: \"http\",\n    },\n};\nfunction safelyParseResponse(rawResponse) {\n    try {\n        return rawResponse === null ? ERROR : JSON.parse(rawResponse);\n    }\n    catch (ex) {\n        return ERROR;\n    }\n}\nfunction createCORSRequest(method, url) {\n    if (!self.XMLHttpRequest) {\n        return null;\n    }\n    var xhr = new XMLHttpRequest();\n    var noop = function noop() { };\n    if (\"withCredentials\" in xhr) {\n        xhr.open(method, url, true);\n        xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n    }\n    else {\n        return null;\n    }\n    var wrapper = {\n        send: function send(data) {\n            xhr.send(data);\n        },\n    };\n    var onload = wrapper_fn_1.default(function () {\n        onload = noop;\n        if (\"onload\" in wrapper) {\n            wrapper.onload(xhr);\n        }\n    }, \"entry\", \"XMLHttpRequest:load\");\n    var onerror = wrapper_fn_1.default(function () {\n        onerror = noop;\n        if (\"onerror\" in wrapper) {\n            wrapper.onerror(xhr);\n        }\n    }, \"entry\", \"XMLHttpRequest:error\");\n    xhr.onload = function () {\n        onload();\n    };\n    xhr.onerror = function () {\n        onerror();\n    };\n    xhr.onreadystatechange = function () {\n        if (xhr.readyState == 4) {\n            if (xhr.status == 200) {\n                onload();\n            }\n            else {\n                onerror();\n            }\n        }\n    };\n    return wrapper;\n}\nfunction execute(url, method, params, cb) {\n    params.suppress_http_code = 1;\n    var data = query_string_1.default.encode(params);\n    if (method != \"post\") {\n        url = query_string_1.default.appendToUrl(url, data);\n        data = \"\";\n    }\n    var request = createCORSRequest(method, url);\n    if (!request) {\n        return false;\n    }\n    request.onload = function (xhr) {\n        cb(safelyParseResponse(xhr.responseText));\n    };\n    request.onerror = function (xhr) {\n        if (xhr.responseText) {\n            cb(safelyParseResponse(xhr.responseText));\n        }\n        else {\n            cb({\n                error: {\n                    code: 1,\n                    error_subcode: 1357045,\n                    message: \"unknown error (empty response)\",\n                    status: xhr.status,\n                    type: \"http\",\n                },\n            });\n        }\n    };\n    request.send(data);\n    return true;\n}\nvar CORSRequest = {\n    execute: execute,\n};\nexports.default = CORSRequest;\n"]},"metadata":{},"sourceType":"script"}