{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst config_1 = require(\"../config\");\n\nconst common_1 = require(\"./common\");\n\nconst debug_1 = require(\"debug\");\n\nconst request_1 = require(\"./request\");\n\nclass NativeBridge {\n  constructor(appId) {\n    this._debug = debug_1.default(\"jssdk:native-bridge\");\n    this._accessTk = common_1.getToken(\"zacc_session\") || \"DEFAULT_ACCESS_TOKEN\";\n    this._jsAccessTk = common_1.getToken(\"zlink3rd\") || \"DEFAULT_JS_TOKEN\";\n    this.results = [];\n    this._userAgent = common_1.getUserAgent();\n    this._device = common_1.checkPlatform();\n    this._appId = appId || common_1.getToken(\"zapp\");\n    this._jsCallFuncCallbacks = {};\n    this._listenerEvent = {};\n    this.registerListenerEvent(\"h5.event.paused\", \"\", () => {\n      if (this.results.length > 0) {\n        let array = this.results;\n        this.results = [];\n\n        try {\n          this.sendLogData(array);\n        } catch (error) {}\n      }\n    });\n\n    if (this.sendLogTimer) {\n      clearInterval(this.sendLogTimer);\n    } else {\n      this.sendLogTimer = setInterval(() => {\n        if (this.results.length > 0) {\n          let array = this.results;\n          this.results = [];\n\n          try {\n            this.sendLogData(array);\n          } catch (error) {}\n        }\n      }, 30000);\n    }\n  }\n\n  sendLogData(data) {\n    try {\n      request_1.default.execute(\"https://api.h5.zalo.me/log\", \"post\", {\n        appId: this._appId,\n        data: JSON.stringify(data)\n      }, response => {});\n    } catch (error) {}\n  }\n\n  setAccessToken(token) {\n    this._accessTk = token;\n  }\n\n  getAccessToken() {\n    return this._accessTk;\n  }\n\n  setJSToken(token) {\n    this._jsAccessTk = token;\n  }\n\n  getJSToken() {\n    return this._jsAccessTk;\n  }\n\n  getAppId() {\n    return this._appId;\n  }\n\n  onJSCall(key, data) {\n    try {\n      this._debug(\"onJSCall\", \"data from native callback\", data);\n\n      const parsedData = common_1.parseJSON(data);\n\n      this._debug(\"onJSCall\", \"data is parsed\", parsedData);\n\n      if (this._jsCallFuncCallbacks[key]) {\n        const callback = this._jsCallFuncCallbacks[key].callback;\n        const timeout = this._jsCallFuncCallbacks[key].timeout;\n\n        if (!!callback) {\n          try {\n            callback.call(this, parsedData);\n          } catch (error) {\n            console.error(\"Call callback error\", error);\n          }\n\n          !!timeout && clearTimeout(timeout);\n          this._jsCallFuncCallbacks[key] = null;\n          delete this._jsCallFuncCallbacks[key];\n        }\n      }\n\n      this.results.push({\n        action: parsedData.action,\n        error: parsedData.error_code\n      });\n    } catch (e) {\n      this._debug(\"onJSCall\", \"error\", e);\n    }\n  }\n\n  onMultiJSCall(key, data) {\n    try {\n      this._debug(\"onMultiJSCall\", \"data from native callback\", data);\n\n      const parsedData = common_1.parseJSON(data);\n\n      this._debug(\"onMultiJSCall\", \"data is parsed\", parsedData);\n\n      if (this._jsCallFuncCallbacks[key]) {\n        const callback = this._jsCallFuncCallbacks[key].callback;\n        const timeout = this._jsCallFuncCallbacks[key].timeout;\n\n        if (!!callback) {\n          try {\n            callback.call(this, parsedData);\n          } catch (error) {\n            console.error(\"Call callback error\", error);\n          }\n\n          !!timeout && clearTimeout(timeout);\n        }\n      }\n\n      this.results.push({\n        action: parsedData.action,\n        error: parsedData.error_code\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  jsCallback(eventId, eventName, callbackData) {\n    ZaloJavaScriptInterface.jsH5EventCallback(eventId, eventName, callbackData);\n  }\n\n  registerListenerEvent(event, callbackData, handler) {\n    console.log(\"register \" + event + \" : \" + callbackData);\n    this._listenerEvent[event] = {\n      handler: handler,\n      data: callbackData\n    };\n  }\n\n  nativeEventHandler(eventId, eventName, eventData) {\n    console.log(\"eventId:\", eventId, \"eventName\", eventName, \"eventData\", eventData);\n\n    if (this._listenerEvent[eventName]) {\n      const {\n        handler,\n        data\n      } = this._listenerEvent[eventName];\n      this.jsCallback(eventId, eventName, data);\n\n      try {\n        handler(eventData);\n      } catch (error) {\n        this._debug(\"nativeEventHandler\", \"H5 handle event fail\", eventName, error);\n      }\n    }\n  }\n\n  defaultCallback(data) {\n    if (data !== null && data !== undefined) {\n      data = common_1.parseJSON(data);\n\n      this._debug(\"defaultCallback\", \"Callback data\", data);\n    }\n  }\n\n  jsCall(action, options, callback, isMultiCallback = false, nRetry = 3, haveTimeout = true) {\n    try {\n      const key = common_1.generateUniqueString(action);\n\n      if (!this._device.isMobile || common_1.isEmpty(action)) {\n        this.onJSCall(key, {\n          error_code: -13,\n          error_message: \"params invalid!\",\n          data: {\n            device: this._device.isMobile,\n            jsToken: this._jsAccessTk,\n            access_token: this._accessTk\n          },\n          action: action\n        });\n        return false;\n      }\n\n      if (options === undefined || options === null) {\n        options = {};\n      }\n\n      if (common_1.isFunction(options) && callback === undefined) {\n        callback = options;\n        options = {};\n      }\n\n      if (!callback) {\n        callback = this.defaultCallback;\n      }\n\n      const timeoutCallback = {\n        error_code: -14,\n        error_message: \"Request Timeout!\",\n        data: {},\n        action: action\n      };\n      this._jsCallFuncCallbacks[key] = {\n        timeout: haveTimeout && config_1.ActionHaveCallBack.includes(action) && setTimeout(() => {\n          this.onJSCall(key, timeoutCallback);\n        }, 8000),\n        callback: callback\n      }; // if (ActionHaveCallBack.includes(action)) {\n      //     setTimeout(() => {\n      //         this.onJSCall(timeoutCallback);\n      //     }, 8000);\n      // }\n\n      try {\n        options = common_1.serialize(options);\n\n        if (isMultiCallback) {\n          if (this._device.isIOS) {\n            return ZaloJavaScriptInterface.jsCall(this._jsAccessTk, action, this._accessTk, options, window.ZJSBridge.onMultiJSCall(key));\n          }\n\n          return ZaloJavaScriptInterface.jsCall(this._jsAccessTk, action, this._accessTk, options, `ZJSBridge.onMultiJSCall('${key}')`);\n        }\n\n        if (this._device.isIOS) {\n          return ZaloJavaScriptInterface.jsCall(this._jsAccessTk, action, this._accessTk, options, window.ZJSBridge.onJSCall(key));\n        }\n\n        return ZaloJavaScriptInterface.jsCall(this._jsAccessTk, action, this._accessTk, options, `ZJSBridge.onJSCall('${key}')`);\n      } catch (error) {\n        if (nRetry-- > 0) {\n          setTimeout(() => {\n            this.jsCall(action, options, callback, isMultiCallback, nRetry);\n          }, 500);\n        } else {\n          const errorCallback = {\n            error_code: -5,\n            error_message: \"Not ready!\",\n            data: {\n              userAgent: this._userAgent,\n              options: options,\n              jsToken: this._jsAccessTk,\n              access_token: this._accessTk\n            },\n            action: action,\n            js_error: error\n          };\n          this.onJSCall(key, errorCallback);\n          return false;\n        }\n      }\n    } catch (error) {\n      this._debug(\"jsCall\", \"error\", error);\n    }\n\n    return false;\n  }\n\n}\n\nconst nativeBridge = new NativeBridge(window.zAppID);\nexports.default = nativeBridge;","map":{"version":3,"sources":["/home/trungnd2/Downloads/insee-client/node_modules/zalo-js-bridge/lib/utils/native-bridge.js"],"names":["Object","defineProperty","exports","value","config_1","require","common_1","debug_1","request_1","NativeBridge","constructor","appId","_debug","default","_accessTk","getToken","_jsAccessTk","results","_userAgent","getUserAgent","_device","checkPlatform","_appId","_jsCallFuncCallbacks","_listenerEvent","registerListenerEvent","length","array","sendLogData","error","sendLogTimer","clearInterval","setInterval","data","execute","JSON","stringify","response","setAccessToken","token","getAccessToken","setJSToken","getJSToken","getAppId","onJSCall","key","parsedData","parseJSON","callback","timeout","call","console","clearTimeout","push","action","error_code","e","onMultiJSCall","log","jsCallback","eventId","eventName","callbackData","ZaloJavaScriptInterface","jsH5EventCallback","event","handler","nativeEventHandler","eventData","defaultCallback","undefined","jsCall","options","isMultiCallback","nRetry","haveTimeout","generateUniqueString","isMobile","isEmpty","error_message","device","jsToken","access_token","isFunction","timeoutCallback","ActionHaveCallBack","includes","setTimeout","serialize","isIOS","window","ZJSBridge","errorCallback","userAgent","js_error","nativeBridge","zAppID"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,OAAD,CAAvB;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMI,YAAN,CAAmB;AACfC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,SAAKC,MAAL,GAAcL,OAAO,CAACM,OAAR,CAAgB,qBAAhB,CAAd;AACA,SAAKC,SAAL,GAAiBR,QAAQ,CAACS,QAAT,CAAkB,cAAlB,KAAqC,sBAAtD;AACA,SAAKC,WAAL,GAAmBV,QAAQ,CAACS,QAAT,CAAkB,UAAlB,KAAiC,kBAApD;AACA,SAAKE,OAAL,GAAe,EAAf;AACA,SAAKC,UAAL,GAAkBZ,QAAQ,CAACa,YAAT,EAAlB;AACA,SAAKC,OAAL,GAAed,QAAQ,CAACe,aAAT,EAAf;AACA,SAAKC,MAAL,GAAcX,KAAK,IAAIL,QAAQ,CAACS,QAAT,CAAkB,MAAlB,CAAvB;AACA,SAAKQ,oBAAL,GAA4B,EAA5B;AACA,SAAKC,cAAL,GAAsB,EAAtB;AACA,SAAKC,qBAAL,CAA2B,iBAA3B,EAA8C,EAA9C,EAAkD,MAAM;AACpD,UAAI,KAAKR,OAAL,CAAaS,MAAb,GAAsB,CAA1B,EAA6B;AACzB,YAAIC,KAAK,GAAG,KAAKV,OAAjB;AACA,aAAKA,OAAL,GAAe,EAAf;;AACA,YAAI;AACA,eAAKW,WAAL,CAAiBD,KAAjB;AACH,SAFD,CAGA,OAAOE,KAAP,EAAc,CAAG;AACpB;AACJ,KATD;;AAUA,QAAI,KAAKC,YAAT,EAAuB;AACnBC,MAAAA,aAAa,CAAC,KAAKD,YAAN,CAAb;AACH,KAFD,MAGK;AACD,WAAKA,YAAL,GAAoBE,WAAW,CAAC,MAAM;AAClC,YAAI,KAAKf,OAAL,CAAaS,MAAb,GAAsB,CAA1B,EAA6B;AACzB,cAAIC,KAAK,GAAG,KAAKV,OAAjB;AACA,eAAKA,OAAL,GAAe,EAAf;;AACA,cAAI;AACA,iBAAKW,WAAL,CAAiBD,KAAjB;AACH,WAFD,CAGA,OAAOE,KAAP,EAAc,CAAG;AACpB;AACJ,OAT8B,EAS5B,KAT4B,CAA/B;AAUH;AACJ;;AACDD,EAAAA,WAAW,CAACK,IAAD,EAAO;AACd,QAAI;AACAzB,MAAAA,SAAS,CAACK,OAAV,CAAkBqB,OAAlB,CAA0B,4BAA1B,EAAwD,MAAxD,EAAgE;AAC5DvB,QAAAA,KAAK,EAAE,KAAKW,MADgD;AAE5DW,QAAAA,IAAI,EAAEE,IAAI,CAACC,SAAL,CAAeH,IAAf;AAFsD,OAAhE,EAGII,QAAD,IAAc,CAAG,CAHpB;AAIH,KALD,CAMA,OAAOR,KAAP,EAAc,CAAG;AACpB;;AACDS,EAAAA,cAAc,CAACC,KAAD,EAAQ;AAClB,SAAKzB,SAAL,GAAiByB,KAAjB;AACH;;AACDC,EAAAA,cAAc,GAAG;AACb,WAAO,KAAK1B,SAAZ;AACH;;AACD2B,EAAAA,UAAU,CAACF,KAAD,EAAQ;AACd,SAAKvB,WAAL,GAAmBuB,KAAnB;AACH;;AACDG,EAAAA,UAAU,GAAG;AACT,WAAO,KAAK1B,WAAZ;AACH;;AACD2B,EAAAA,QAAQ,GAAG;AACP,WAAO,KAAKrB,MAAZ;AACH;;AACDsB,EAAAA,QAAQ,CAACC,GAAD,EAAMZ,IAAN,EAAY;AAChB,QAAI;AACA,WAAKrB,MAAL,CAAY,UAAZ,EAAwB,2BAAxB,EAAqDqB,IAArD;;AACA,YAAMa,UAAU,GAAGxC,QAAQ,CAACyC,SAAT,CAAmBd,IAAnB,CAAnB;;AACA,WAAKrB,MAAL,CAAY,UAAZ,EAAwB,gBAAxB,EAA0CkC,UAA1C;;AACA,UAAI,KAAKvB,oBAAL,CAA0BsB,GAA1B,CAAJ,EAAoC;AAChC,cAAMG,QAAQ,GAAG,KAAKzB,oBAAL,CAA0BsB,GAA1B,EAA+BG,QAAhD;AACA,cAAMC,OAAO,GAAG,KAAK1B,oBAAL,CAA0BsB,GAA1B,EAA+BI,OAA/C;;AACA,YAAI,CAAC,CAACD,QAAN,EAAgB;AACZ,cAAI;AACAA,YAAAA,QAAQ,CAACE,IAAT,CAAc,IAAd,EAAoBJ,UAApB;AACH,WAFD,CAGA,OAAOjB,KAAP,EAAc;AACVsB,YAAAA,OAAO,CAACtB,KAAR,CAAc,qBAAd,EAAqCA,KAArC;AACH;;AACD,WAAC,CAACoB,OAAF,IAAaG,YAAY,CAACH,OAAD,CAAzB;AACA,eAAK1B,oBAAL,CAA0BsB,GAA1B,IAAiC,IAAjC;AACA,iBAAO,KAAKtB,oBAAL,CAA0BsB,GAA1B,CAAP;AACH;AACJ;;AACD,WAAK5B,OAAL,CAAaoC,IAAb,CAAkB;AACdC,QAAAA,MAAM,EAAER,UAAU,CAACQ,MADL;AAEdzB,QAAAA,KAAK,EAAEiB,UAAU,CAACS;AAFJ,OAAlB;AAIH,KAvBD,CAwBA,OAAOC,CAAP,EAAU;AACN,WAAK5C,MAAL,CAAY,UAAZ,EAAwB,OAAxB,EAAiC4C,CAAjC;AACH;AACJ;;AACDC,EAAAA,aAAa,CAACZ,GAAD,EAAMZ,IAAN,EAAY;AACrB,QAAI;AACA,WAAKrB,MAAL,CAAY,eAAZ,EAA6B,2BAA7B,EAA0DqB,IAA1D;;AACA,YAAMa,UAAU,GAAGxC,QAAQ,CAACyC,SAAT,CAAmBd,IAAnB,CAAnB;;AACA,WAAKrB,MAAL,CAAY,eAAZ,EAA6B,gBAA7B,EAA+CkC,UAA/C;;AACA,UAAI,KAAKvB,oBAAL,CAA0BsB,GAA1B,CAAJ,EAAoC;AAChC,cAAMG,QAAQ,GAAG,KAAKzB,oBAAL,CAA0BsB,GAA1B,EAA+BG,QAAhD;AACA,cAAMC,OAAO,GAAG,KAAK1B,oBAAL,CAA0BsB,GAA1B,EAA+BI,OAA/C;;AACA,YAAI,CAAC,CAACD,QAAN,EAAgB;AACZ,cAAI;AACAA,YAAAA,QAAQ,CAACE,IAAT,CAAc,IAAd,EAAoBJ,UAApB;AACH,WAFD,CAGA,OAAOjB,KAAP,EAAc;AACVsB,YAAAA,OAAO,CAACtB,KAAR,CAAc,qBAAd,EAAqCA,KAArC;AACH;;AACD,WAAC,CAACoB,OAAF,IAAaG,YAAY,CAACH,OAAD,CAAzB;AACH;AACJ;;AACD,WAAKhC,OAAL,CAAaoC,IAAb,CAAkB;AACdC,QAAAA,MAAM,EAAER,UAAU,CAACQ,MADL;AAEdzB,QAAAA,KAAK,EAAEiB,UAAU,CAACS;AAFJ,OAAlB;AAIH,KArBD,CAsBA,OAAOC,CAAP,EAAU;AACNL,MAAAA,OAAO,CAACO,GAAR,CAAYF,CAAZ;AACH;AACJ;;AACDG,EAAAA,UAAU,CAACC,OAAD,EAAUC,SAAV,EAAqBC,YAArB,EAAmC;AACzCC,IAAAA,uBAAuB,CAACC,iBAAxB,CAA0CJ,OAA1C,EAAmDC,SAAnD,EAA8DC,YAA9D;AACH;;AACDrC,EAAAA,qBAAqB,CAACwC,KAAD,EAAQH,YAAR,EAAsBI,OAAtB,EAA+B;AAChDf,IAAAA,OAAO,CAACO,GAAR,CAAY,cAAcO,KAAd,GAAsB,KAAtB,GAA8BH,YAA1C;AACA,SAAKtC,cAAL,CAAoByC,KAApB,IAA6B;AACzBC,MAAAA,OAAO,EAAEA,OADgB;AAEzBjC,MAAAA,IAAI,EAAE6B;AAFmB,KAA7B;AAIH;;AACDK,EAAAA,kBAAkB,CAACP,OAAD,EAAUC,SAAV,EAAqBO,SAArB,EAAgC;AAC9CjB,IAAAA,OAAO,CAACO,GAAR,CAAY,UAAZ,EAAwBE,OAAxB,EAAiC,WAAjC,EAA8CC,SAA9C,EAAyD,WAAzD,EAAsEO,SAAtE;;AACA,QAAI,KAAK5C,cAAL,CAAoBqC,SAApB,CAAJ,EAAoC;AAChC,YAAM;AAAEK,QAAAA,OAAF;AAAWjC,QAAAA;AAAX,UAAoB,KAAKT,cAAL,CAAoBqC,SAApB,CAA1B;AACA,WAAKF,UAAL,CAAgBC,OAAhB,EAAyBC,SAAzB,EAAoC5B,IAApC;;AACA,UAAI;AACAiC,QAAAA,OAAO,CAACE,SAAD,CAAP;AACH,OAFD,CAGA,OAAOvC,KAAP,EAAc;AACV,aAAKjB,MAAL,CAAY,oBAAZ,EAAkC,sBAAlC,EAA0DiD,SAA1D,EAAqEhC,KAArE;AACH;AACJ;AACJ;;AACDwC,EAAAA,eAAe,CAACpC,IAAD,EAAO;AAClB,QAAIA,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAKqC,SAA9B,EAAyC;AACrCrC,MAAAA,IAAI,GAAG3B,QAAQ,CAACyC,SAAT,CAAmBd,IAAnB,CAAP;;AACA,WAAKrB,MAAL,CAAY,iBAAZ,EAA+B,eAA/B,EAAgDqB,IAAhD;AACH;AACJ;;AACDsC,EAAAA,MAAM,CAACjB,MAAD,EAASkB,OAAT,EAAkBxB,QAAlB,EAA4ByB,eAAe,GAAG,KAA9C,EAAqDC,MAAM,GAAG,CAA9D,EAAiEC,WAAW,GAAG,IAA/E,EAAqF;AACvF,QAAI;AACA,YAAM9B,GAAG,GAAGvC,QAAQ,CAACsE,oBAAT,CAA8BtB,MAA9B,CAAZ;;AACA,UAAI,CAAC,KAAKlC,OAAL,CAAayD,QAAd,IAA0BvE,QAAQ,CAACwE,OAAT,CAAiBxB,MAAjB,CAA9B,EAAwD;AACpD,aAAKV,QAAL,CAAcC,GAAd,EAAmB;AACfU,UAAAA,UAAU,EAAE,CAAC,EADE;AAEfwB,UAAAA,aAAa,EAAE,iBAFA;AAGf9C,UAAAA,IAAI,EAAE;AACF+C,YAAAA,MAAM,EAAE,KAAK5D,OAAL,CAAayD,QADnB;AAEFI,YAAAA,OAAO,EAAE,KAAKjE,WAFZ;AAGFkE,YAAAA,YAAY,EAAE,KAAKpE;AAHjB,WAHS;AAQfwC,UAAAA,MAAM,EAAEA;AARO,SAAnB;AAUA,eAAO,KAAP;AACH;;AACD,UAAIkB,OAAO,KAAKF,SAAZ,IAAyBE,OAAO,KAAK,IAAzC,EAA+C;AAC3CA,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAIlE,QAAQ,CAAC6E,UAAT,CAAoBX,OAApB,KAAgCxB,QAAQ,KAAKsB,SAAjD,EAA4D;AACxDtB,QAAAA,QAAQ,GAAGwB,OAAX;AACAA,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,CAACxB,QAAL,EAAe;AACXA,QAAAA,QAAQ,GAAG,KAAKqB,eAAhB;AACH;;AACD,YAAMe,eAAe,GAAG;AACpB7B,QAAAA,UAAU,EAAE,CAAC,EADO;AAEpBwB,QAAAA,aAAa,EAAE,kBAFK;AAGpB9C,QAAAA,IAAI,EAAE,EAHc;AAIpBqB,QAAAA,MAAM,EAAEA;AAJY,OAAxB;AAMA,WAAK/B,oBAAL,CAA0BsB,GAA1B,IAAiC;AAC7BI,QAAAA,OAAO,EAAE0B,WAAW,IAChBvE,QAAQ,CAACiF,kBAAT,CAA4BC,QAA5B,CAAqChC,MAArC,CADK,IAELiC,UAAU,CAAC,MAAM;AACb,eAAK3C,QAAL,CAAcC,GAAd,EAAmBuC,eAAnB;AACH,SAFS,EAEP,IAFO,CAHe;AAM7BpC,QAAAA,QAAQ,EAAEA;AANmB,OAAjC,CA/BA,CAuCA;AACA;AACA;AACA;AACA;;AACA,UAAI;AACAwB,QAAAA,OAAO,GAAGlE,QAAQ,CAACkF,SAAT,CAAmBhB,OAAnB,CAAV;;AACA,YAAIC,eAAJ,EAAqB;AACjB,cAAI,KAAKrD,OAAL,CAAaqE,KAAjB,EAAwB;AACpB,mBAAO1B,uBAAuB,CAACQ,MAAxB,CAA+B,KAAKvD,WAApC,EAAiDsC,MAAjD,EAAyD,KAAKxC,SAA9D,EAAyE0D,OAAzE,EAAkFkB,MAAM,CAACC,SAAP,CAAiBlC,aAAjB,CAA+BZ,GAA/B,CAAlF,CAAP;AACH;;AACD,iBAAOkB,uBAAuB,CAACQ,MAAxB,CAA+B,KAAKvD,WAApC,EAAiDsC,MAAjD,EAAyD,KAAKxC,SAA9D,EAAyE0D,OAAzE,EAAmF,4BAA2B3B,GAAI,IAAlH,CAAP;AACH;;AACD,YAAI,KAAKzB,OAAL,CAAaqE,KAAjB,EAAwB;AACpB,iBAAO1B,uBAAuB,CAACQ,MAAxB,CAA+B,KAAKvD,WAApC,EAAiDsC,MAAjD,EAAyD,KAAKxC,SAA9D,EAAyE0D,OAAzE,EAAkFkB,MAAM,CAACC,SAAP,CAAiB/C,QAAjB,CAA0BC,GAA1B,CAAlF,CAAP;AACH;;AACD,eAAOkB,uBAAuB,CAACQ,MAAxB,CAA+B,KAAKvD,WAApC,EAAiDsC,MAAjD,EAAyD,KAAKxC,SAA9D,EAAyE0D,OAAzE,EAAmF,uBAAsB3B,GAAI,IAA7G,CAAP;AACH,OAZD,CAaA,OAAOhB,KAAP,EAAc;AACV,YAAI6C,MAAM,KAAK,CAAf,EAAkB;AACda,UAAAA,UAAU,CAAC,MAAM;AACb,iBAAKhB,MAAL,CAAYjB,MAAZ,EAAoBkB,OAApB,EAA6BxB,QAA7B,EAAuCyB,eAAvC,EAAwDC,MAAxD;AACH,WAFS,EAEP,GAFO,CAAV;AAGH,SAJD,MAKK;AACD,gBAAMkB,aAAa,GAAG;AAClBrC,YAAAA,UAAU,EAAE,CAAC,CADK;AAElBwB,YAAAA,aAAa,EAAE,YAFG;AAGlB9C,YAAAA,IAAI,EAAE;AACF4D,cAAAA,SAAS,EAAE,KAAK3E,UADd;AAEFsD,cAAAA,OAAO,EAAEA,OAFP;AAGFS,cAAAA,OAAO,EAAE,KAAKjE,WAHZ;AAIFkE,cAAAA,YAAY,EAAE,KAAKpE;AAJjB,aAHY;AASlBwC,YAAAA,MAAM,EAAEA,MATU;AAUlBwC,YAAAA,QAAQ,EAAEjE;AAVQ,WAAtB;AAYA,eAAKe,QAAL,CAAcC,GAAd,EAAmB+C,aAAnB;AACA,iBAAO,KAAP;AACH;AACJ;AACJ,KAhFD,CAiFA,OAAO/D,KAAP,EAAc;AACV,WAAKjB,MAAL,CAAY,QAAZ,EAAsB,OAAtB,EAA+BiB,KAA/B;AACH;;AACD,WAAO,KAAP;AACH;;AAxOc;;AA0OnB,MAAMkE,YAAY,GAAG,IAAItF,YAAJ,CAAiBiF,MAAM,CAACM,MAAxB,CAArB;AACA9F,OAAO,CAACW,OAAR,GAAkBkF,YAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst config_1 = require(\"../config\");\nconst common_1 = require(\"./common\");\nconst debug_1 = require(\"debug\");\nconst request_1 = require(\"./request\");\nclass NativeBridge {\n    constructor(appId) {\n        this._debug = debug_1.default(\"jssdk:native-bridge\");\n        this._accessTk = common_1.getToken(\"zacc_session\") || \"DEFAULT_ACCESS_TOKEN\";\n        this._jsAccessTk = common_1.getToken(\"zlink3rd\") || \"DEFAULT_JS_TOKEN\";\n        this.results = [];\n        this._userAgent = common_1.getUserAgent();\n        this._device = common_1.checkPlatform();\n        this._appId = appId || common_1.getToken(\"zapp\");\n        this._jsCallFuncCallbacks = {};\n        this._listenerEvent = {};\n        this.registerListenerEvent(\"h5.event.paused\", \"\", () => {\n            if (this.results.length > 0) {\n                let array = this.results;\n                this.results = [];\n                try {\n                    this.sendLogData(array);\n                }\n                catch (error) { }\n            }\n        });\n        if (this.sendLogTimer) {\n            clearInterval(this.sendLogTimer);\n        }\n        else {\n            this.sendLogTimer = setInterval(() => {\n                if (this.results.length > 0) {\n                    let array = this.results;\n                    this.results = [];\n                    try {\n                        this.sendLogData(array);\n                    }\n                    catch (error) { }\n                }\n            }, 30000);\n        }\n    }\n    sendLogData(data) {\n        try {\n            request_1.default.execute(\"https://api.h5.zalo.me/log\", \"post\", {\n                appId: this._appId,\n                data: JSON.stringify(data),\n            }, (response) => { });\n        }\n        catch (error) { }\n    }\n    setAccessToken(token) {\n        this._accessTk = token;\n    }\n    getAccessToken() {\n        return this._accessTk;\n    }\n    setJSToken(token) {\n        this._jsAccessTk = token;\n    }\n    getJSToken() {\n        return this._jsAccessTk;\n    }\n    getAppId() {\n        return this._appId;\n    }\n    onJSCall(key, data) {\n        try {\n            this._debug(\"onJSCall\", \"data from native callback\", data);\n            const parsedData = common_1.parseJSON(data);\n            this._debug(\"onJSCall\", \"data is parsed\", parsedData);\n            if (this._jsCallFuncCallbacks[key]) {\n                const callback = this._jsCallFuncCallbacks[key].callback;\n                const timeout = this._jsCallFuncCallbacks[key].timeout;\n                if (!!callback) {\n                    try {\n                        callback.call(this, parsedData);\n                    }\n                    catch (error) {\n                        console.error(\"Call callback error\", error);\n                    }\n                    !!timeout && clearTimeout(timeout);\n                    this._jsCallFuncCallbacks[key] = null;\n                    delete this._jsCallFuncCallbacks[key];\n                }\n            }\n            this.results.push({\n                action: parsedData.action,\n                error: parsedData.error_code,\n            });\n        }\n        catch (e) {\n            this._debug(\"onJSCall\", \"error\", e);\n        }\n    }\n    onMultiJSCall(key, data) {\n        try {\n            this._debug(\"onMultiJSCall\", \"data from native callback\", data);\n            const parsedData = common_1.parseJSON(data);\n            this._debug(\"onMultiJSCall\", \"data is parsed\", parsedData);\n            if (this._jsCallFuncCallbacks[key]) {\n                const callback = this._jsCallFuncCallbacks[key].callback;\n                const timeout = this._jsCallFuncCallbacks[key].timeout;\n                if (!!callback) {\n                    try {\n                        callback.call(this, parsedData);\n                    }\n                    catch (error) {\n                        console.error(\"Call callback error\", error);\n                    }\n                    !!timeout && clearTimeout(timeout);\n                }\n            }\n            this.results.push({\n                action: parsedData.action,\n                error: parsedData.error_code,\n            });\n        }\n        catch (e) {\n            console.log(e);\n        }\n    }\n    jsCallback(eventId, eventName, callbackData) {\n        ZaloJavaScriptInterface.jsH5EventCallback(eventId, eventName, callbackData);\n    }\n    registerListenerEvent(event, callbackData, handler) {\n        console.log(\"register \" + event + \" : \" + callbackData);\n        this._listenerEvent[event] = {\n            handler: handler,\n            data: callbackData,\n        };\n    }\n    nativeEventHandler(eventId, eventName, eventData) {\n        console.log(\"eventId:\", eventId, \"eventName\", eventName, \"eventData\", eventData);\n        if (this._listenerEvent[eventName]) {\n            const { handler, data } = this._listenerEvent[eventName];\n            this.jsCallback(eventId, eventName, data);\n            try {\n                handler(eventData);\n            }\n            catch (error) {\n                this._debug(\"nativeEventHandler\", \"H5 handle event fail\", eventName, error);\n            }\n        }\n    }\n    defaultCallback(data) {\n        if (data !== null && data !== undefined) {\n            data = common_1.parseJSON(data);\n            this._debug(\"defaultCallback\", \"Callback data\", data);\n        }\n    }\n    jsCall(action, options, callback, isMultiCallback = false, nRetry = 3, haveTimeout = true) {\n        try {\n            const key = common_1.generateUniqueString(action);\n            if (!this._device.isMobile || common_1.isEmpty(action)) {\n                this.onJSCall(key, {\n                    error_code: -13,\n                    error_message: \"params invalid!\",\n                    data: {\n                        device: this._device.isMobile,\n                        jsToken: this._jsAccessTk,\n                        access_token: this._accessTk,\n                    },\n                    action: action,\n                });\n                return false;\n            }\n            if (options === undefined || options === null) {\n                options = {};\n            }\n            if (common_1.isFunction(options) && callback === undefined) {\n                callback = options;\n                options = {};\n            }\n            if (!callback) {\n                callback = this.defaultCallback;\n            }\n            const timeoutCallback = {\n                error_code: -14,\n                error_message: \"Request Timeout!\",\n                data: {},\n                action: action,\n            };\n            this._jsCallFuncCallbacks[key] = {\n                timeout: haveTimeout &&\n                    config_1.ActionHaveCallBack.includes(action) &&\n                    setTimeout(() => {\n                        this.onJSCall(key, timeoutCallback);\n                    }, 8000),\n                callback: callback,\n            };\n            // if (ActionHaveCallBack.includes(action)) {\n            //     setTimeout(() => {\n            //         this.onJSCall(timeoutCallback);\n            //     }, 8000);\n            // }\n            try {\n                options = common_1.serialize(options);\n                if (isMultiCallback) {\n                    if (this._device.isIOS) {\n                        return ZaloJavaScriptInterface.jsCall(this._jsAccessTk, action, this._accessTk, options, window.ZJSBridge.onMultiJSCall(key));\n                    }\n                    return ZaloJavaScriptInterface.jsCall(this._jsAccessTk, action, this._accessTk, options, `ZJSBridge.onMultiJSCall('${key}')`);\n                }\n                if (this._device.isIOS) {\n                    return ZaloJavaScriptInterface.jsCall(this._jsAccessTk, action, this._accessTk, options, window.ZJSBridge.onJSCall(key));\n                }\n                return ZaloJavaScriptInterface.jsCall(this._jsAccessTk, action, this._accessTk, options, `ZJSBridge.onJSCall('${key}')`);\n            }\n            catch (error) {\n                if (nRetry-- > 0) {\n                    setTimeout(() => {\n                        this.jsCall(action, options, callback, isMultiCallback, nRetry);\n                    }, 500);\n                }\n                else {\n                    const errorCallback = {\n                        error_code: -5,\n                        error_message: \"Not ready!\",\n                        data: {\n                            userAgent: this._userAgent,\n                            options: options,\n                            jsToken: this._jsAccessTk,\n                            access_token: this._accessTk,\n                        },\n                        action: action,\n                        js_error: error,\n                    };\n                    this.onJSCall(key, errorCallback);\n                    return false;\n                }\n            }\n        }\n        catch (error) {\n            this._debug(\"jsCall\", \"error\", error);\n        }\n        return false;\n    }\n}\nconst nativeBridge = new NativeBridge(window.zAppID);\nexports.default = nativeBridge;\n"]},"metadata":{},"sourceType":"script"}