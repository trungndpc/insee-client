"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ObjectAssign = require("object-assign");
const config_1 = require("./config");
const native_bridge_1 = require("./utils/native-bridge");
const zalo_1 = require("./zalo");
const device_1 = require("./device");
const h5_1 = require("./h5");
const misc_1 = require("./misc");
const ads_1 = require("./ads");
const auth_1 = require("./utils/auth");
const CommonUtils = require("./utils/common");
class ZJSBridge {
    getVersion() {
        return SDK_VERSION;
    }
    onJSCall(key) {
        return function (data) {
            native_bridge_1.default.onJSCall(key, data);
        };
    }
    onMultiJSCall(key) {
        return function (data) {
            native_bridge_1.default.onMultiJSCall(key, data);
        };
    }
    login(callback) {
        const loginCallBack = (res) => {
            try {
                auth_1.default.getAccessToken(callback);
                if (0 == res.error_code && res.hasOwnProperty("data")) {
                    const cookies = res.data && res.data.cookiesOAuthLogins;
                    Array.isArray(cookies) && cookies.forEach(e => {
                        if (e.name == "h5.zdn.vn_zacc_session") {
                            native_bridge_1.default.setAccessToken(e.value);
                        }
                        if (e.name == "h5.zdn.vn_zlink3rd") {
                            native_bridge_1.default.setJSToken(e.value);
                        }
                    });
                }
            }
            catch (error) {
                console.log(error);
                return callback(null);
            }
        };
        native_bridge_1.default.jsCall(config_1.Action.login, {}, loginCallBack, true);
    }
    callCustomAction(action, data, callback, isMultiCallback = true, nRetry = 3, haveTimeout = true) {
        native_bridge_1.default.jsCall(action, data, callback, isMultiCallback, nRetry, haveTimeout);
    }
    /**
     * Đăng ký dữ liệu trả về khi có event từ ZaloApp gọi xuống H5
     * @example
     * ZJSBridge.registerListenerEvent("h5.event.action.close", '{"handle_h5": 1}', () => {console.log("Webview close")})
     * @param {string} eventName Tên event: h5.event.action.close
     * @param {string} dataCallBack
     * @param {void} handler
     */
    registerListenerEvent(eventName, dataCallBack, handler) {
        native_bridge_1.default.registerListenerEvent(eventName, dataCallBack, handler);
    }
    onCloseWebview(callback) {
        this.registerListenerEvent("h5.event.action.close", '{"handle_h5": 1}', callback);
    }
    nativeEventHandler(eventId, eventName, eventData) {
        native_bridge_1.default.nativeEventHandler(eventId, eventName, eventData);
    }
    setZAccSession(value) {
        native_bridge_1.default.setAccessToken(value);
    }
    setJSToken(value) {
        native_bridge_1.default.setJSToken(value);
    }
    getCookie(name) {
        return CommonUtils.readCookie(name);
    }
    getCookieFallback(name) {
        return CommonUtils.readCookieFallback(name);
    }
}
const zjsbridge = new ZJSBridge();
exports.default = ObjectAssign(zjsbridge, {
    Zalo: zalo_1.default,
    Device: device_1.default,
    H5: h5_1.default,
    Misc: misc_1.default,
    Ads: ads_1.default,
});
window.ZJSBridge = ObjectAssign(zjsbridge, {
    Zalo: zalo_1.default,
    Device: device_1.default,
    H5: h5_1.default,
    Misc: misc_1.default,
    Ads: ads_1.default,
});
window.zaloJSV2 = {
    getCookieFallback: CommonUtils.getToken,
    zalo_h5_event_handler: function (eventId, eventName, eventData) {
        zjsbridge.nativeEventHandler(eventId, eventName, eventData);
    },
    webviewInvisible: function (data) {
        console.log("webviewInvisible", data);
    }
};
