"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const native_bridge_1 = require("./utils/native-bridge");
const config_1 = require("./config");
/**
 * Class chứa các action Misc
 */
class Misc {
    /**
     * Check app installed
     * @example
     * ZJSBridge.Misc.checkAppInstalled(data, e => {console.log(e)})
     * @param {object} data
     * ```
     * {
     *      "totalApp": 3,
     *      "apps": [
     *          {
     *          "app_1": {
     *                      "packageName": "com.vng.tvl",
     *                      "schema": "zalo-4341275532218618714://",
     *                      "wpStoreUrl": ""
     *                   }
     *          },
     *          {
     *          "app_2": {
     *                      "packageName": "com.vng.gpdttkvn",
     *                      "schema": "zalo-3945316935671174926://",
     *                      "wpStoreUrl": ""
     *                   }
     *          },
     *          {
     *          "app_3": {
     *                      "packageName": "gsn.game.zingplaynew1",
     *                      "schema": "zalo-3554569838779270945://",
     *                      "wpStoreUrl": ""
     *                   }
     *          }
     *      ]
     * }
     * ```
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static checkAppInstalled(data, callback) {
        return native_bridge_1.default.jsCall(config_1.Action.checkappinstalled, data, callback);
    }
    /**
     * Query show.
     * @example
     * ZJSBridge.Misc.queryShow(data, e => {console.log(e)})
     * @param {object} data
     * ```
     * {
     *      "query": "Exit ?",
     *      "touserid": xxx (encode),
     * }
     * ```
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static queryShow(data, callback) {
        data["zapp"] = native_bridge_1.default.getAppId();
        return native_bridge_1.default.jsCall(config_1.Action.queryshow, data, callback);
    }
    /**
     * Query hide.
     * @example
     * ZJSBridge.Misc.queryHide(data, e => {console.log(e)})
     * @param {object} data
     * ```
     * {
     *      "query": "Exit ?",
     *      "touserid": xxx (encode),
     * }
     * ```
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static queryHide(data, callback) {
        data["zapp"] = native_bridge_1.default.getAppId();
        return native_bridge_1.default.jsCall(config_1.Action.queryhide, data, callback);
    }
    /**
     * Open in app rw.
     * @example
     * ZJSBridge.Misc.openInAppRw(data, e => {console.log(e)})
     * @param {object} data
     * ```
     * {
     *      "url":"http://xx.xx"
     * }
     * ```
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openInAppRw(data, callback) {
        return native_bridge_1.default.jsCall(config_1.Action.openinapprw, data, callback);
    }
    /**
     * Kiểm tra trạng thái thu thập step data:
     * - 0 -> Off tracking
     * - 1 -> On tracking
     * @example
     * ZJSBridge.Misc.getTrackingStatus(e => {console.log(e)})
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static getTrackingStatus(callback) {
        return native_bridge_1.default.jsCall(config_1.Action.gettrackingstatus, {}, callback);
    }
    /**
     * Set trạng thái thu thập step data
     * - 0 -> Off tracking
     * - 1 -> On tracking
     * @example
     * ZJSBridge.Misc.setTrackingStatus(data, e => {console.log(e)})
     * @param {object} data
     * ```
     * {
     *      "status": 0 | 1
     * }
     * ```
     * - status:
     *      - 0 -> Off tracking
     *      - 1 -> On tracking
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static setTrackingStatus(data, callback) {
        return native_bridge_1.default.jsCall(config_1.Action.settrackingstatus, data, callback);
    }
    /**
     * Lấy thông tin step của ngày hiện tại tính đến thời điểm gọi:
     * - "steps" : tổng số step
     * - "calories" : tổng số calories tiêu hao
     * - "distance" : tổng quãng đường di chuyển"
     * @example
     * ZJSBridge.Misc.getDayStep(e => {console.log(e)})
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static getDayStep(callback) {
        return native_bridge_1.default.jsCall(config_1.Action.getdaystep, {}, callback);
    }
    /**
     * Force submit toàn bộ step data từ client lên server.
     * @example
     * ZJSBridge.Misc.forceSubmitData(e => {console.log(e)})
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static forceSubmitData(callback) {
        return native_bridge_1.default.jsCall(config_1.Action.forcesubmitdata, {}, callback);
    }
    /**
     * Set weight config phục vụ cho việc tính toán calories.
     * @example
     * ZJSBridge.Misc.setWeight(data, e => {console.log(e)})
     * @param {object} data
     * ```
     * {
     *      "weight": 60
     * }
     * ```
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static setWeight(data, callback) {
        return native_bridge_1.default.jsCall(config_1.Action.setweight, data, callback);
    }
    /**
     * Open profile ext.
     * @example
     * ZJSBridge.Misc.openProfileExt(data, e => {console.log(e)})
     * @param {object} data
     * ```
     * {
     *      "profile_uid": xxx,
     *      "type": "0" | "1" | "2",
     *      "app_id": xxx (appIdNoise)
     * }
     * ```
     * - type:
     *      - 0: mở page (OA), pageId truyền lên được encode bằng ZCypher, (ZCypher.encodePageId(pageId)).
     *      - 1: Mở profile User, userId truyền lên được encode bằng ZCypher by AppId.
     *      - 2: Mở profile OA bằng Alias (field uid truyền lên là alias của OA).
     * > Trong trường hợp không decode thì client sẽ sử dụng trực tiếp field uId trong options gởi lên để mở profile.
     * > Nếu có decode thì dữ liệu trả về sẽ là trường uId đã được decode.
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openProfileExt(data, callback) {
        data["zapp"] = native_bridge_1.default.getAppId();
        return native_bridge_1.default.jsCall(config_1.Action.openProfileExt, data, callback);
    }
    /**
     * Download bộ sticker về điện thoại user
     * @example
     * ZJSBridge.Misc.downloadCate(data, e => {console.log(e)})
     * @param {object} data
     * ```
     *{
     *   "cateDetailsInfo":{
     *      "id":50,
     *      "name":"Khu Vườn Trên Mây 1",
     *      "totalImage":34,
     *      "thumbUrl":"http://api.zaloapp.com/c/0/c/7/c/50/preview/",
     *      "iconUrl":"http://api.zaloapp.com/c/0/c/7/c/50/icon/kvtm1_ic.png",
     *      "iconPreview":"http://api.zaloapp.com/c/0/c/7/c/50/icon_pre/kvtm1_thumb.png",
     *      "status":0,
     *      "version":1,
     *      "thumbImg":"http://api.zaloapp.com/c/0/c/7/c/50/preview/kvtm1_cover.png",
     *      "source":"",
     *      "permission":1,
     *      "downloaded":0,
     *      "cost":0,
     *      "purchase":false,
     *      "qrCode":"http://qr-stickers.zaloapp.com/1/qrstickerc0c07e2a426fab31f27e.jpg",
     *      "linkPromote":"http://stickers.zaloapp.com/detail?cid=c65678bc44f9ada7f4e8",
     *      "slogan":null,
     *      "isHidden":0
     *   }
     *}
     * ```
     * - cateDetailsInfo : giá trị tương ứng bộ sticker cần download (là một string json)
     * > Trong trường hợp không decode thì client sẽ sử dụng trực tiếp field cate_id trong cateDetailsInfo trong options gởi lên để mở profile.
     * > Nếu có decode thì dữ liệu dữ liệu trả về là cate_id đã được decode.
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static downloadCate(data, callback) {
        return native_bridge_1.default.jsCall(config_1.Action.downloadcate, data, callback);
    }
}
exports.default = Misc;
