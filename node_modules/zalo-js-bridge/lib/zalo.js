"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const native_bridge_1 = require("./utils/native-bridge");
const config_1 = require("./config");
const common_1 = require("./utils/common");
/** Class chứa các phương thức tương tác với ứng dụng Zalo. Cách gọi ZJSBridge.Zalo.* */
class Zalo {
    /**
     * Get app version
     * @example
     * ZJSBridge.Zalo.getVersion()
     */
    static getVersion() {
        return common_1.getZaloVersion();
    }
    /**
     * Set Access Token.
     * @example
     * ZJSBridge.Zalo.getAccessToken()
     */
    static getAccessToken() {
        const accessTk = native_bridge_1.default.getAccessToken();
        return accessTk || "no token";
    }
    /**
     * Set Access Token.
     * @example
     * ZJSBridge.Zalo.setAccessToken("")
     * @param {string} token
     */
    static setAccessToken(token) {
        if (!token) {
            return "no token";
        }
        return native_bridge_1.default.setAccessToken(token);
    }
    /**
     * Mở tab Danh bạ trên Zalo
     * @example
     * ZJSBridge.Zalo.openTabContact(e => {console.log(e)})
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openTabContact(callback) {
        console.log("openTabContact");
        return native_bridge_1.default.jsCall(config_1.Action.opentabcontact, {}, callback);
    }
    /**
     * Hàm lấy những sticker đã tải của người dùng
     * @example
     * ZJSBridge.Zalo.getDownloadedSticker(e => {console.log(e)})
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static getDownloadedSticker(callback) {
        console.log("getDownloadedSticker");
        return native_bridge_1.default.jsCall(config_1.Action.getdownloadedsticker, {}, callback);
    }
    /**
     * Hàm mở cửa sổ share sticker cho bạn bè
     * @example
     * ZJSBridge.Zalo.openShareSticker(cateDetailsInfo, e => {console.log(e)})
     * @param {string} cateDetailsInfo Giá trị tương ứng bộ sticker cần share (là một string json)
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openShareSticker(cateDetailsInfo, callback) {
        return native_bridge_1.default.jsCall(config_1.Action.opensharesticker, { cateDetailsInfo: cateDetailsInfo }, callback);
    }
    /**
     * Mở webview Zalo với URL truyền vào
     * @example
     * ZJSBridge.Zalo.openInApp("https://zalo.me", e => {console.log(e)})
     * @param {*} url URL muốn mở webview
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openInApp(url, callback) {
        return native_bridge_1.default.jsCall(config_1.Action.openinapp, { url: url }, callback);
    }
    /**
     * Mở trình duyệt mặc định của điện thoại với URL truyền vào
     * @example
     * ZJSBridge.Zalo.openOutApp("https://zalo.me", e => {console.log(e)})
     * @param {string} url URL muốn mở trình duyệt
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openOutApp(url, callback) {
        return native_bridge_1.default.jsCall(config_1.Action.openoutapp, { url: url }, callback);
    }
    /**
     * Hàm gọi màn hình share lên tường của Zalo, với các thông tin truyền vào
     * @example
     * ZJSBridge.Zalo.openPostFeed(feedInfo, e => {console.log(e)})
     * @param {pbject} feedInfo
     * - Type = 1: post feed hình ảnh
     * ```
     * {"type":1, "photoUrl":"http://dev.org.zads.zdn.vn/2a16c7fefbbb12e54baa"}
     * ```
     * - Type = 4: post feed link
     * ```
     * {
     *   "type":4,
     *   "link":"http://news.zing.vn/Trung-uong-quyet-dinh-phuong-an-nhan-su-cap-cao-post632739.html",
     *   "title":"Trung ương quyết định phương án nhân sự cấp cao",
     *   "thumb": "xxx",
     *   "description":"xxx",
     * }
     * ```
     * - Type = 5: post feed profile
     * ```
     * {
     *   "type":5,
     *   "avt":"http://s120.avatar.talk.zdn.vn/5/f/9/6/27/120/33a07b66a06fd78ba5e645a750f3d72b.jpg",
     *   "uid":"116052312",
     *   "dpn": "Galaxy Cinema",
     * }
     * ```
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openPostFeed(feedInfo, callback) {
        feedInfo["zapp"] = native_bridge_1.default.getAppId();
        return native_bridge_1.default.jsCall(config_1.Action.openpostfeed, feedInfo, callback);
    }
    /**
     * Hàm gọi màn hình share lên cho bạn bè, với các thông tin truyền vào
     * @example
     * ZJSBridge.Zalo.openShareSheet(sheetInfo, e => {console.log(e)})
     * @param {object} sheetInfo
     * - Chia sẻ ảnh
     * ```
     * {"type":1,"photoUrl":"http://dev.org.zads.zdn.vn/2a16c7fefbbb12e54baa"}
     * ```
     * - Chia sẻ GIF
     * ```
     * {
     *  "type":11,
     *  "photoUrl":"http://dev.org.zads.zdn.vn/2a16c7fefbbb12e54baa",
     *  "gifUrl":"http://dev.org.zads.zdn.vn/fc88fe60c2252b7b7234",
     *  "width":480,
     *  "height":270
     * }
     * ```
     * - Chia sẻ Video
     * ```
     * {
     *   "type": 12,
     *   "videoThumb":"http://dev.org.zads.zdn.vn/fc88fe60c2252b7b7234",
     *   "videoUrl":"http://dev.org.zads.zdn.vn/fc88fe60c2252b7b7234",
     *   "width":480,
     *   "height":270
     * }
     * ```
     * - Chia sẻ link
     * ```
     * {
     *   "type": 4,
     *   "link": "",
     *   "chatOnly": 1, // tắt bật share lên nhật ký
     * }
     * ```
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openShareSheet(sheetInfo, callback) {
        sheetInfo["zapp"] = native_bridge_1.default.getAppId();
        return native_bridge_1.default.jsCall(config_1.Action.opensharesheet, sheetInfo, callback);
    }
    /**
     * Open profile.
     * @example
     * ZJSBridge.Zalo.openProfile(data, e => {console.log(e)})
     * @param {object} data
     * ```
     * {
     *      "uId": xxx,
     *      "type": 0 | 1 | 2,
     *      "appId": xxx (appIdNoise),
     *      "sourceId": xxx,
     *      "sourceIndex": xxx
     * }
     * ```
     * - type:
     *      - 0: Mở page (OA), pageId truyền lên được encode bằng ZCypher, (ZCypher.encodePageId(pageId)).
     *      - 1: Mở profile User, userId truyền lên được encode bằng ZCypher by AppId.
     *      - 2: Mở profile OA bằng Alias (field uid truyền lên là alias của OA).
     * > Trong trường hợp không decode thì client sẽ sử dụng trực tiếp field uId trong options gởi lên để mở profile.
     * > Nếu có decode thì dữ liệu trả về sẽ là trường uId đã được decode.
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openProfile(data, callback) {
        data["zapp"] = native_bridge_1.default.getAppId();
        return native_bridge_1.default.jsCall(config_1.Action.openprofile, data, callback);
    }
    /**
     * Open feed detail.
     * @example
     * ZJSBridge.Zalo.openFeedDetail(data, e => {console.log(e)})
     * @param {object} data
     * ```
     * {
     *      "feed_id": xxx,
     *      "owner_id": xxx
     * }
     * ```
     * > Trong trường hợp không decode thì client sẽ sử dụng trực tiếp field feed_id và owner_id của html5 gởi lên trong options gởi lên để mở feed detail.
     * > Nếu có decode thì dữ liệu trả về sẽ là trường feed_id và owner_id đã được decode. (ZCypher.encodeFeedId - ZCypher.encodeUserId).
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openFeedDetail(data, callback) {
        data["zapp"] = native_bridge_1.default.getAppId();
        return native_bridge_1.default.jsCall(config_1.Action.openfeeddetail, data, callback);
    }
    /**
     * Open friend rada.
     * @example
     * ZJSBridge.Zalo.openFriendRada(e => {console.log(e)})
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openFriendRada(callback) {
        return native_bridge_1.default.jsCall(config_1.Action.openfriendrada, {}, callback);
    }
    /**
     * Open page.
     * @example
     * ZJSBridge.Zalo.openPage(e => {console.log(e)})
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openPage(callback) {
        return native_bridge_1.default.jsCall(config_1.Action.openpage, {}, callback);
    }
    /**
     * Open photo detail.
     * @example
     * ZJSBridge.Zalo.openPhotoDetail(data, e => {console.log(e)})
     * @param {object} data
     * ```
     * {
     *      "owner_id": xxx,
     *      "photo_id": xxx
     * }
     * ```
     * > Trong trường hợp không decode thì client sẽ sử dụng trực tiếp field photo_id và owner_id của html5 gởi lên trong options gởi lên để mở game detail.
     * > Nếu có decode thì dữ liệu trả về sẽ là trường photo_id và owner_id đã được decode. (ZCypherExt.encodePhotoId, ZCypher.encodeUserId).
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openPhotoDetail(data, callback) {
        data["zapp"] = native_bridge_1.default.getAppId();
        return native_bridge_1.default.jsCall(config_1.Action.openphotodetail, data, callback);
    }
    /**
     * Open galary.
     * @example
     * ZJSBridge.Zalo.openGalary(data, e => {console.log(e)})
     * @param {object} data
     * ```
     * {
     *      "uId": xxx
     * }
     * ```
     * > Trong trường hợp không decode thì client sẽ sử dụng trực tiếp field uId trong options gởi lên để mở gallery.
     * > Nếu có decode thì dữ liệu trả về sẽ là trường uId đã được decode. (ZCypher.encodeUserId).
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openGalary(data, callback) {
        data["zapp"] = native_bridge_1.default.getAppId();
        return native_bridge_1.default.jsCall(config_1.Action.opengalary, data, callback);
    }
    /**
     * Open game center.
     * @example
     * ZJSBridge.Zalo.openGameCenter(e => {console.log(e)})
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openGameCenter(callback) {
        return native_bridge_1.default.jsCall(config_1.Action.opengamecenter, {}, callback);
    }
    /**
     * Open game news.
     * @example
     * ZJSBridge.Zalo.openGameNews(e => {console.log(e)})
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openGameNews(callback) {
        return native_bridge_1.default.jsCall(config_1.Action.opengamenews, {}, callback);
    }
    /**
     * Open tab social.
     * @example
     * ZJSBridge.Zalo.openTabSocial(e => {console.log(e)})
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openTabSocial(callback) {
        return native_bridge_1.default.jsCall(config_1.Action.opentabsocial, {}, callback);
    }
    /**
     * Open friend suggest.
     * @example
     * ZJSBridge.Zalo.openFriendSuggest(e => {console.log(e)})
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openFriendSuggest(callback) {
        return native_bridge_1.default.jsCall(config_1.Action.openfriendsuggest, {}, callback);
    }
    /**
     * Open group list.
     * @example
     * ZJSBridge.Zalo.openGroupList(e => {console.log(e)})
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openGroupList(callback) {
        return native_bridge_1.default.jsCall(config_1.Action.opengrouplist, {}, callback);
    }
    /**
     * Open nearby.
     * @example
     * ZJSBridge.Zalo.openNearby(e => {console.log(e)})
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openNearby(callback) {
        return native_bridge_1.default.jsCall(config_1.Action.opennearby, {}, callback);
    }
    /**
     * Open room.
     * @example
     * ZJSBridge.Zalo.openRoom(e => {console.log(e)})
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openRoom(callback) {
        return native_bridge_1.default.jsCall(config_1.Action.openroom, {}, callback);
    }
    /**
     * Open sticker store.
     * @example
     * ZJSBridge.Zalo.openStickerStore(e => {console.log(e)})
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openStickerStore(callback) {
        return native_bridge_1.default.jsCall(config_1.Action.openstickerstore, {}, callback);
    }
    /**
     * Open create chat.
     * @example
     * ZJSBridge.Zalo.openCreateChat(e => {console.log(e)})
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openCreateChat(callback) {
        return native_bridge_1.default.jsCall(config_1.Action.opencreatechat, {}, callback);
    }
    /**
     * Copy link cate sticker.
     * @example
     * ZJSBridge.Zalo.copyLinkCateSticker(e => {console.log(e)})
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static copyLinkCateSticker(callback) {
        return native_bridge_1.default.jsCall(config_1.Action.copylinkcatesticker, {}, callback);
    }
    /**
     * Open chat.
     * @example
     * ZJSBridge.Zalo.openChat(data, e => {console.log(e)})
     * @param {object} data
     * ```
     * {
     *      "uId": xxx,
     *      "type": 0 | 1,
     *      "appId": xxx (appIdNoise),
     *      "sourceId": xxx,
     *      "sourceIndex": xxx,
     *      "force": 0 | 1
     * }
     * ```
     * - type:
     *      - 0: open chat với page (pageId encode bằng ZCypher).
     *      - 1: open chat với user (userId encode bằng ZCypher theo appId).
     * > Trong trường hợp không decode thì client sẽ sử dụng trực tiếp field uId trong options gởi lên để mở tab chat.
     * > Nếu có decode thì dữ liệu trả về sẽ là trường uId đã được decode.
     * > Giá trị force là 1 (force) hoặc 0 (không force)"
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openChat(data, callback) {
        data["zapp"] = native_bridge_1.default.getAppId();
        return native_bridge_1.default.jsCall(config_1.Action.openchat, data, callback);
    }
    /**
     * Force open tab chat.
     * @example
     * ZJSBridge.Zalo.openTabChat(e => {console.log(e)})
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openTabChat(callback) {
        return native_bridge_1.default.jsCall(config_1.Action.opentabchat, {}, callback);
    }
    /**
     * Open add friend.
     * @example
     * ZJSBridge.Zalo.openAddFriend(data, e => {console.log(e)})
     * @param {object} data
     * ```
     * {
     *      "uid_from": xxx (encode),
     *      "uid_to": xxx (encode),
     *      "source": xxx
     * }
     * ```
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openAddFriend(data, callback) {
        data["zapp"] = native_bridge_1.default.getAppId();
        return native_bridge_1.default.jsCall(config_1.Action.openaddfriend, data, callback);
    }
    /**
     * Open tab more.
     * @example
     * ZJSBridge.Zalo.openTabMore(e => {console.log(e)})
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openTabMore(callback) {
        return native_bridge_1.default.jsCall(config_1.Action.opentabmore, {}, callback);
    }
    /**
     * Open login devices.
     * @example
     * ZJSBridge.Zalo.openLoginDevices(e => {console.log(e)})
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openLoginDevices(callback) {
        return native_bridge_1.default.jsCall(config_1.Action.openlogindevices, {}, callback);
    }
    /**
     * Open send sticker.
     * @example
     * ZJSBridge.Zalo.openSendSticker(data, e => {console.log(e)})
     * @param {object} data
     * ```
     * {
     *      "id": <int>, // id của sticker được gửi
     *      "touserid": xxx (encode), // id của người cần gửi tới
     *      "cateId": <int>, // category id của bộ sticker
     *      "type": <int>, // loại sticker
     *      "autoplay": 0 | 1, // default sẽ là 1. Không có field này cũng sẽ giữ logic cũ là auto play 1.
     *      "msg": "Hello guys",
     *      "mentions": [],
     *      "stickerList": [
     *          {
     *              "id": <int>,
     *              "catId": <int>,
     *              "type": <int>,
     *              "autoplay": 0 | 1
     *          }
     *      ]
     * }
     * ```
     * - autoplay:
     *      - default sẽ là 1. Không có field này cũng sẽ giữ logic cũ là auto play 1.
     *      - 0 sẽ dùng cho Full Screen Sticker LUA. Kịch bản gửi lại quà khi nhận được 1 con LUA mới. Nếu không muốn autoplay back
     * - "msg" + "mentions" sử dụng khi muốn gửi kèm msg text có mention (đang dùng cho msg ecard sinh nhật trong group).
     * - "stickerList" nếu có sẽ lấy random 1 trong các sticker để gửi đi thay vì sticker id default ở cấp ngoài.
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openSendSticker(data, callback) {
        data["zapp"] = native_bridge_1.default.getAppId();
        return native_bridge_1.default.jsCall(config_1.Action.opensendsticker, data, callback);
    }
    /**
     * Report abuse.
     * @example
     * ZJSBridge.Zalo.reportAbuse(data, e => {console.log(e)})
     * @param {object} data
     * ```
     * {
     *      "uidto": xxx, // uid cua user or OA
     *      "type": <int>,
     *      "objectid": xxx,
     *      "message": "",
     * }
     * ```
     * - type: hiện chỉ đang support type 2, 5
     *      - REPORT_PHOTO 1 (uid = photoOwnerUid, objectId = photoId)
     *      - REPORT_PROFILE 2 (uid = profileUid, objectId = """")
     *      - REPORT_SPAM 3 (uid = profileUid)
     *      - REPORT_SPAM_IN_ROOM 4 (uid = senderUid, objectId = roomId)
     *      - REPORT_VIP_PROFILE 5 (uid = OA uid, objectId = """")
     *      - REPORT_VIP_FEED 6 (uid = feedOwnerUid, objectId = feedId)
     *      - REPORT_NORMAL_FEED 7 (uid = feedOwnerUid, objectId = feedId)
     *      - REPORT_FEED_COMMENT 8  (uid = feedOwnerUid, objectId = feedId, reportMsg = commendUid)
     *      - REPORT_SPAM_WIFI_ROOM 9 (uid = photoOwnerUid, objectId = globalMsgId)
     *      - REPORT_LINK 10  (reportMsg = url bị report)
     *      - REPORT_STORY 11) (uid = storyOwnerUid, objectId = storyId)"
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static reportAbuse(data, callback) {
        data["zapp"] = native_bridge_1.default.getAppId();
        return native_bridge_1.default.jsCall(config_1.Action.reportabuse, data, callback);
    }
    /**
     * Follow OA.
     * @example
     * ZJSBridge.Zalo.followOA(data, e => {console.log(e)})
     * @param {object} data
     * ```
     * {
     *      "uid": xxx // encode PageId
     * }
     * ```
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static followOA(data, callback) {
        data["zapp"] = native_bridge_1.default.getAppId();
        return native_bridge_1.default.jsCall(config_1.Action.followoa, data, callback);
    }
    /**
     * Unfollow OA.
     * @example
     * ZJSBridge.Zalo.unfollowOA(data, e => {console.log(e)})
     * @param {object} data
     * ```
     * {
     *      "uid": xxx // encode PageId
     * }
     * ```
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static unfollowOA(data, callback) {
        data["zapp"] = native_bridge_1.default.getAppId();
        return native_bridge_1.default.jsCall(config_1.Action.unfollowoa, data, callback);
    }
    /**
     * Open game detail.
     * @example
     * ZJSBridge.Zalo.openGameDetail(data, e => {console.log(e)})
     * @param {object} data
     * ```
     * {
     *      "zapp_id": xxx,
     *      "package": "gsn.game.zingplaynew1"
     * }
     * ```
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openGameDetail(data, callback) {
        return native_bridge_1.default.jsCall(config_1.Action.opengamedetail, data, callback);
    }
    /**
     * Dùng cho H5 chủ động request camera permission.
     * @example
     * ZJSBridge.Zalo.requestCamera(e => {console.log(e)})
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     * ```
     * {
     *      "error_code": 0,
     *      "error_message": "User accepted",
     * }
     *```
     * Error code define:
     * -  0: User accepted
     * -  1: App had permission before
     * - -1: Unknown error
     * - -2: User denied
     */
    static requestCamera(callback) {
        return native_bridge_1.default.jsCall(config_1.Action.requestcamera, {}, callback);
    }
    /**
     * Mở Mini App
     * @example
     * ZJSBridge.Zalo.openMiniApp(data, e => {console.log(e)})
     * @param {object} data
     * ```
     * {
     *      "appId": "",
     *      "params": {
     *          "key": "value"
     *      }
     * }
     * ```
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openMiniApp(data, callback) {
        const appId = data === null || data === void 0 ? void 0 : data.appId;
        const params = (data === null || data === void 0 ? void 0 : data.params) || {};
        const queryParamString = Object.entries(params)
            .map(function ([key, value]) {
            return [key, value].join("=");
        })
            .join("&");
        return native_bridge_1.default.jsCall(config_1.Action.open_mp, {
            mpUrl: `https://h5.zdn.vn/zapps/${appId}/${queryParamString.length > 0 ? "?" + queryParamString : ""}`,
            mpInfo: {
                appId: appId,
            },
        }, callback);
    }
}
exports.default = Zalo;
