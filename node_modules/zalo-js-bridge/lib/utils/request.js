"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const query_string_1 = require("./query-string");
const wrapper_fn_1 = require("./wrapper-fn");
var ERROR = {
    error: {
        code: 1,
        error_subcode: 1357046,
        message: "Received Invalid JSON reply.",
        type: "http",
    },
};
function safelyParseResponse(rawResponse) {
    try {
        return rawResponse === null ? ERROR : JSON.parse(rawResponse);
    }
    catch (ex) {
        return ERROR;
    }
}
function createCORSRequest(method, url) {
    if (!self.XMLHttpRequest) {
        return null;
    }
    var xhr = new XMLHttpRequest();
    var noop = function noop() { };
    if ("withCredentials" in xhr) {
        xhr.open(method, url, true);
        xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    }
    else {
        return null;
    }
    var wrapper = {
        send: function send(data) {
            xhr.send(data);
        },
    };
    var onload = wrapper_fn_1.default(function () {
        onload = noop;
        if ("onload" in wrapper) {
            wrapper.onload(xhr);
        }
    }, "entry", "XMLHttpRequest:load");
    var onerror = wrapper_fn_1.default(function () {
        onerror = noop;
        if ("onerror" in wrapper) {
            wrapper.onerror(xhr);
        }
    }, "entry", "XMLHttpRequest:error");
    xhr.onload = function () {
        onload();
    };
    xhr.onerror = function () {
        onerror();
    };
    xhr.onreadystatechange = function () {
        if (xhr.readyState == 4) {
            if (xhr.status == 200) {
                onload();
            }
            else {
                onerror();
            }
        }
    };
    return wrapper;
}
function execute(url, method, params, cb) {
    params.suppress_http_code = 1;
    var data = query_string_1.default.encode(params);
    if (method != "post") {
        url = query_string_1.default.appendToUrl(url, data);
        data = "";
    }
    var request = createCORSRequest(method, url);
    if (!request) {
        return false;
    }
    request.onload = function (xhr) {
        cb(safelyParseResponse(xhr.responseText));
    };
    request.onerror = function (xhr) {
        if (xhr.responseText) {
            cb(safelyParseResponse(xhr.responseText));
        }
        else {
            cb({
                error: {
                    code: 1,
                    error_subcode: 1357045,
                    message: "unknown error (empty response)",
                    status: xhr.status,
                    type: "http",
                },
            });
        }
    };
    request.send(data);
    return true;
}
var CORSRequest = {
    execute: execute,
};
exports.default = CORSRequest;
