"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../config");
const common_1 = require("./common");
const debug_1 = require("debug");
const request_1 = require("./request");
class NativeBridge {
    constructor(appId) {
        this._debug = debug_1.default("jssdk:native-bridge");
        this._accessTk = common_1.getToken("zacc_session") || "DEFAULT_ACCESS_TOKEN";
        this._jsAccessTk = common_1.getToken("zlink3rd") || "DEFAULT_JS_TOKEN";
        this.results = [];
        this._userAgent = common_1.getUserAgent();
        this._device = common_1.checkPlatform();
        this._appId = appId || common_1.getToken("zapp");
        this._jsCallFuncCallbacks = {};
        this._listenerEvent = {};
        this.registerListenerEvent("h5.event.paused", "", () => {
            if (this.results.length > 0) {
                let array = this.results;
                this.results = [];
                try {
                    this.sendLogData(array);
                }
                catch (error) { }
            }
        });
        if (this.sendLogTimer) {
            clearInterval(this.sendLogTimer);
        }
        else {
            this.sendLogTimer = setInterval(() => {
                if (this.results.length > 0) {
                    let array = this.results;
                    this.results = [];
                    try {
                        this.sendLogData(array);
                    }
                    catch (error) { }
                }
            }, 30000);
        }
    }
    sendLogData(data) {
        try {
            request_1.default.execute("https://api.h5.zalo.me/log", "post", {
                appId: this._appId,
                data: JSON.stringify(data),
            }, (response) => { });
        }
        catch (error) { }
    }
    setAccessToken(token) {
        this._accessTk = token;
    }
    getAccessToken() {
        return this._accessTk;
    }
    setJSToken(token) {
        this._jsAccessTk = token;
    }
    getJSToken() {
        return this._jsAccessTk;
    }
    getAppId() {
        return this._appId;
    }
    onJSCall(key, data) {
        try {
            this._debug("onJSCall", "data from native callback", data);
            const parsedData = common_1.parseJSON(data);
            this._debug("onJSCall", "data is parsed", parsedData);
            if (this._jsCallFuncCallbacks[key]) {
                const callback = this._jsCallFuncCallbacks[key].callback;
                const timeout = this._jsCallFuncCallbacks[key].timeout;
                if (!!callback) {
                    try {
                        callback.call(this, parsedData);
                    }
                    catch (error) {
                        console.error("Call callback error", error);
                    }
                    !!timeout && clearTimeout(timeout);
                    this._jsCallFuncCallbacks[key] = null;
                    delete this._jsCallFuncCallbacks[key];
                }
            }
            this.results.push({
                action: parsedData.action,
                error: parsedData.error_code,
            });
        }
        catch (e) {
            this._debug("onJSCall", "error", e);
        }
    }
    onMultiJSCall(key, data) {
        try {
            this._debug("onMultiJSCall", "data from native callback", data);
            const parsedData = common_1.parseJSON(data);
            this._debug("onMultiJSCall", "data is parsed", parsedData);
            if (this._jsCallFuncCallbacks[key]) {
                const callback = this._jsCallFuncCallbacks[key].callback;
                const timeout = this._jsCallFuncCallbacks[key].timeout;
                if (!!callback) {
                    try {
                        callback.call(this, parsedData);
                    }
                    catch (error) {
                        console.error("Call callback error", error);
                    }
                    !!timeout && clearTimeout(timeout);
                }
            }
            this.results.push({
                action: parsedData.action,
                error: parsedData.error_code,
            });
        }
        catch (e) {
            console.log(e);
        }
    }
    jsCallback(eventId, eventName, callbackData) {
        ZaloJavaScriptInterface.jsH5EventCallback(eventId, eventName, callbackData);
    }
    registerListenerEvent(event, callbackData, handler) {
        console.log("register " + event + " : " + callbackData);
        this._listenerEvent[event] = {
            handler: handler,
            data: callbackData,
        };
    }
    nativeEventHandler(eventId, eventName, eventData) {
        console.log("eventId:", eventId, "eventName", eventName, "eventData", eventData);
        if (this._listenerEvent[eventName]) {
            const { handler, data } = this._listenerEvent[eventName];
            this.jsCallback(eventId, eventName, data);
            try {
                handler(eventData);
            }
            catch (error) {
                this._debug("nativeEventHandler", "H5 handle event fail", eventName, error);
            }
        }
    }
    defaultCallback(data) {
        if (data !== null && data !== undefined) {
            data = common_1.parseJSON(data);
            this._debug("defaultCallback", "Callback data", data);
        }
    }
    jsCall(action, options, callback, isMultiCallback = false, nRetry = 3, haveTimeout = true) {
        try {
            const key = common_1.generateUniqueString(action);
            if (!this._device.isMobile || common_1.isEmpty(action)) {
                this.onJSCall(key, {
                    error_code: -13,
                    error_message: "params invalid!",
                    data: {
                        device: this._device.isMobile,
                        jsToken: this._jsAccessTk,
                        access_token: this._accessTk,
                    },
                    action: action,
                });
                return false;
            }
            if (options === undefined || options === null) {
                options = {};
            }
            if (common_1.isFunction(options) && callback === undefined) {
                callback = options;
                options = {};
            }
            if (!callback) {
                callback = this.defaultCallback;
            }
            const timeoutCallback = {
                error_code: -14,
                error_message: "Request Timeout!",
                data: {},
                action: action,
            };
            this._jsCallFuncCallbacks[key] = {
                timeout: haveTimeout &&
                    config_1.ActionHaveCallBack.includes(action) &&
                    setTimeout(() => {
                        this.onJSCall(key, timeoutCallback);
                    }, 8000),
                callback: callback,
            };
            // if (ActionHaveCallBack.includes(action)) {
            //     setTimeout(() => {
            //         this.onJSCall(timeoutCallback);
            //     }, 8000);
            // }
            try {
                options = common_1.serialize(options);
                if (isMultiCallback) {
                    if (this._device.isIOS) {
                        return ZaloJavaScriptInterface.jsCall(this._jsAccessTk, action, this._accessTk, options, window.ZJSBridge.onMultiJSCall(key));
                    }
                    return ZaloJavaScriptInterface.jsCall(this._jsAccessTk, action, this._accessTk, options, `ZJSBridge.onMultiJSCall('${key}')`);
                }
                if (this._device.isIOS) {
                    return ZaloJavaScriptInterface.jsCall(this._jsAccessTk, action, this._accessTk, options, window.ZJSBridge.onJSCall(key));
                }
                return ZaloJavaScriptInterface.jsCall(this._jsAccessTk, action, this._accessTk, options, `ZJSBridge.onJSCall('${key}')`);
            }
            catch (error) {
                if (nRetry-- > 0) {
                    setTimeout(() => {
                        this.jsCall(action, options, callback, isMultiCallback, nRetry);
                    }, 500);
                }
                else {
                    const errorCallback = {
                        error_code: -5,
                        error_message: "Not ready!",
                        data: {
                            userAgent: this._userAgent,
                            options: options,
                            jsToken: this._jsAccessTk,
                            access_token: this._accessTk,
                        },
                        action: action,
                        js_error: error,
                    };
                    this.onJSCall(key, errorCallback);
                    return false;
                }
            }
        }
        catch (error) {
            this._debug("jsCall", "error", error);
        }
        return false;
    }
}
const nativeBridge = new NativeBridge(window.zAppID);
exports.default = nativeBridge;
