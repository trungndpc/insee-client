"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function encode(bag) {
    var pairs = [];
    for (var key in bag) {
        if (bag.hasOwnProperty(key)) {
            var value = bag[key];
            if (typeof value === "undefined") {
                return;
            }
            if (value === null) {
                pairs.push(key);
                return;
            }
            pairs.push(encodeURIComponent(key) + "=" + encodeURIComponent(value));
        }
    }
    return pairs.join("&");
}
function decode(str, strict) {
    var data = {};
    if (str === "") {
        return data;
    }
    var pairs = str.split("&");
    for (var i = 0; i < pairs.length; i++) {
        var pair = pairs[i].split("=", 2);
        var key = decodeURIComponent(pair[0]);
        if (strict && Object.prototype.hasOwnProperty.call(data, key)) {
            throw new URIError("Duplicate key: " + key);
        }
        data[key] = pair.length === 2 ? decodeURIComponent(pair[1]) : null;
    }
    return data;
}
function appendToUrl(url, params) {
    return (url +
        (url.indexOf("?") !== -1 ? "&" : "?") +
        (typeof params === "string" ? params : QueryString.encode(params)));
}
function getParameterByName(name, url) {
    if (!url) {
        url = window.location.href;
    }
    name = name.replace(/[\[\]]/g, "\\$&");
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"), results = regex.exec(url);
    if (!results)
        return null;
    if (!results[2])
        return "";
    return decodeURIComponent(results[2].replace(/\+/g, " "));
}
function getParamsAsObject(query) {
    var params = {};
    if (!query)
        return params;
    var values = query.split("&");
    values.map(function (item) {
        var data = item.split("=");
        if (!data || data.length != 2)
            return;
        params[data[0]] = decodeURIComponent(data[1]);
    });
    return params;
}
function toQueryString(data) {
    if (!data)
        return "";
    if ((typeof data === "undefined" ? "undefined" : typeof (data)) != "object")
        return data;
    var key = Object.keys(data);
    var params = [];
    key.map(function (k) {
        var v = data[k];
        if ((typeof v === "undefined" ? "undefined" : typeof (v)) == "object")
            v = JSON.stringify(v);
        else
            v = encodeURIComponent(v);
        var item = [k, v].join("=");
        params.push(item);
    });
    return params.join("&");
}
const QueryString = {
    encode: encode,
    decode: decode,
    appendToUrl: appendToUrl,
    getParameterByName: getParameterByName,
    getParamsAsObject: getParamsAsObject,
    toQueryString: toQueryString,
};
exports.default = QueryString;
