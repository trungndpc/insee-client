"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateUniqueString = exports.getZaloVersion = exports.checkPlatform = exports.getUserAgent = exports.getToken = exports.isFunction = exports.serialize = exports.isZaloBrowser = exports.parseJSON = exports.isString = exports.isEmpty = exports.isObject = exports.readCookieFallback = exports.writeCookie = exports.readCookie = void 0;
const Cookies = require("js-cookie");
exports.readCookie = (name) => {
    const ckString = document.cookie;
    if (ckString) {
        const listCookie = ckString.split("; ");
        if (listCookie && listCookie.length > 0) {
            var nameLen = name.length + 1;
            for (var i = listCookie.length - 1; i >= 0; i--) {
                let item = listCookie[i];
                if (item && item.indexOf(name) === 0) {
                    item = item.substring(nameLen, item.length);
                    if (item) {
                        item = item.replace(/["']/g, "");
                        return item;
                    }
                }
            }
        }
    }
    return null;
};
exports.writeCookie = (name, value, path, domain, expires, secure) => {
    try {
        const expiresTime = new Date();
        expiresTime.setSeconds(expiresTime.getSeconds() + expires);
        Cookies.set(name, value, {
            path: path,
            domain: domain,
            expires: expiresTime,
            secure: secure,
        });
    }
    catch (error) {
        console.error("Fail to set cookie");
    }
};
const getCurrHost = () => {
    const curr = window.location.host;
    // if (curr) {
    //     if (curr.indexOf("www.") === 0) {
    //         return curr.replace("www.", "") + "_";
    //     } else {
    //         return curr + "_";
    //     }
    // }
    return `${curr}_`;
};
const getCurrHostRootZaloMe = () => {
    const curr = window.location.host;
    if (curr) {
        if (curr.indexOf("zalo.me") >= 0) {
            return "zalo.me_";
        }
        else if (curr.indexOf("baomoi.com") >= 0) {
            return "baomoi.com_";
        }
        else if (curr.indexOf("mp3.zing.vn") >= 0) {
            return "mp3.zing.vn_";
        }
        else if (curr.indexOf("zaloapp.com") >= 0) {
            return "zaloapp.com_";
        }
    }
    return "";
};
const readCookieByDomain = (name) => {
    return exports.readCookie(getCurrHost() + name);
};
const readCookieByRootDomain = (name) => {
    return exports.readCookie(getCurrHostRootZaloMe() + name);
};
exports.readCookieFallback = (name) => {
    let ck = readCookieByDomain(name);
    if (!ck) {
        ck = readCookieByRootDomain(name);
        if (!ck) {
            return exports.readCookie(name);
        }
    }
    return ck;
};
exports.isObject = (obj) => {
    return typeof obj === "object";
};
exports.isEmpty = (str) => {
    return !str || 0 === str.trim().length;
};
exports.isString = (obj) => {
    if (typeof obj === "string") {
        return true;
    }
    if (obj === undefined || obj === null) {
        return false;
    }
    if (typeof obj !== "object") {
        return false;
    }
    if (!obj.constructor) {
        return false;
    }
    return obj.constructor.toString().match(/string/i) !== null;
};
exports.parseJSON = (str) => {
    const formattedStr = str.replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t");
    if (exports.isObject(JSON) && JSON.parse && exports.isString(str)) {
        return JSON.parse(formattedStr, (key, value) => {
            return value;
        });
    }
    else if (typeof str === "object") {
        return str;
    }
    else {
        return new Function("return " + str)();
    }
};
exports.isZaloBrowser = () => {
    const uAgent = window.navigator.userAgent;
    return uAgent.includes("Zalo");
};
exports.serialize = (data) => {
    if (exports.isObject(JSON) && JSON.stringify) {
        return JSON.stringify(data);
    }
    if (data === undefined) {
        return "undefined";
    }
    if (data === null) {
        return "null";
    }
    try {
        if (typeof data === "string" ||
            data.constructor.toString().match(/string/i) !== null) {
            return '"' + data.replace(/"/g, '\\"') + '"';
        }
    }
    catch (e) {
        console.log(e);
    }
    var a;
    if (Object.prototype.toString.call(data).match(/array/i) !== null) {
        a = new Array();
        var length = data.length;
        for (var i = 0; i < length; i++) {
            a.push(exports.serialize(data[i]));
        }
        return "[" + a.join(",") + "]";
    }
    if (typeof data === "object") {
        a = new Array();
        for (var f in data) {
            a.push('"' + f + '":' + exports.serialize(data[f]));
        }
        return "{" + a.join(",") + "}";
    }
    return data.toString();
};
exports.isFunction = (value) => {
    return typeof value === "function";
};
exports.getToken = (name) => {
    return exports.readCookieFallback(name);
};
exports.getUserAgent = () => navigator.userAgent || navigator.vendor || window.opera;
exports.checkPlatform = () => {
    const _agent = exports.getUserAgent().toLowerCase();
    return {
        isWP: /iemobile/.test(_agent),
        isAndroid: /android/i.test(_agent) && !/iemobile/.test(_agent),
        isIOS: /iphone|ipad|ipod/.test(_agent) && !/iemobile/.test(_agent),
        isMobile: /android|iphone|ipad|ipod|iemobile/.test(_agent),
    };
};
exports.getZaloVersion = () => exports.readCookie("zversion");
const REGEXP_SPECIAL_UNICODE = new RegExp("[\\u0300-\\u036f]", "g");
const REGEXP_ACCENT_D = new RegExp("[đ|Đ]", "g");
const REGEXP_SPACES = new RegExp("\\s", "g");
/**
 * Generate a unique string from a input string by:
 * 1. Remove accents from input string
 * 2. Remove all spaces
 * 3. Lower case
 * 4. Concat with a random string
 * @param {string} str
 * @returns unique string
 */
exports.generateUniqueString = (str = "") => {
    const RANDOM_STRING_LENGTH = 4;
    const formattedStr = str
        .normalize("NFD")
        .replace(REGEXP_SPECIAL_UNICODE, "")
        .replace(REGEXP_ACCENT_D, "d")
        .replace(REGEXP_SPACES, "")
        .toLowerCase();
    return `${formattedStr}_${Math.random()
        .toString(36)
        .substr(2, RANDOM_STRING_LENGTH)}`;
};
