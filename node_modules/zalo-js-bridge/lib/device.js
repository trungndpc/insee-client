"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const native_bridge_1 = require("./utils/native-bridge");
const config_1 = require("./config");
/**
 * Class chứa các action liên quan đến webview
 */
class Device {
    /**
     * Open app store. Note: Trong trường hợp không decode thì client sử dụng trực tiếp field url trong options. Đối với iOS , khi ituneId > 0 thì mở embbedStore
     * @example
     * var data = {
     *           "android" :{
     *               "url" : "http://xxx.xxx"
     *           },
     *           "ios" : {
     *               "url": "http://xxx.xxx",
     *               "scheme_url" :  "zalo-1396017800851131651://",
     *               "itunes_id" : 0
     *           },
     *           "wp_data" : {
     *               "url": "http://xxx.xxx"
     *           }
     *       }
     * ZJSBridge.Device.openAppStore(data)
     * @param {object} data
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openAppStore(data, callback = (data) => { }) {
        return native_bridge_1.default.jsCall(config_1.Action.openappstore, data, callback);
    }
    /**
     * Get location
     * @example
     * ZJSBridge.Device.getLocation(false, "App cần quyền location để chạy chức năng này", e => {console.log(e)})
     * @param {boolean} silentRequest optional -- mặc định là false, khi true thì sẽ request ngầm, có quyền thì lấy, không thì thôi, không xin quyền
     * @param {string} permissionDescription permission descrition
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static getLocation(silentRequest = false, permissionDescription = "", callback) {
        return native_bridge_1.default.jsCall(config_1.Action.getlocation, {
            silent_request: silentRequest,
            permission_description: permissionDescription,
        }, callback, true);
    }
    /**
     * Open App.
     * Note:
     * - Trường hợp app đã cài thì mở app, ngược lại thì mở url trả về.
     * - Trong data: appinfo nghĩa là:
     *      - Nếu android thì là package
     *      - ios là scheme_url
     *      - windowsphone là protocol_url
     * - Trường hợp không decode thì client sẽ sử dụng appinfo hoặc url trong options để mở app.
     * - Trường hợp có decode thì trong data trả về sẽ chứa những trường như define bên cạnh. Trong đó:
     *      - Trong data ios trả về, itunes_id sẽ thay thế cho trường appId.
     *      - Mỗi platform sẽ có thêm url trong data trả về là link open store nếu app chưa được installed. (để tracking)
     * - Khi mở app với ios phần extra_data sẽ được gắn vào schema:
     * > VD: zalo-1396017800851131651://[any_uri_in_there]
     * - Khi mở app bằng android extUrl sẽ được truyền thêm qua app bằng hàm intent.setData(Uri.parse(extUrl));
     * @example
     * # Đường web
     * var data = {
     *              "android": {
     *                  "package": "gsn.game.zingplaynew1",
     *                  "extUrl": "any_uri_in_there",
     *                  "url": "http://app.zaloapp.com/gsn.game.zingplaynew1?pid=zalo&c=gamecenter"
     *              },
     *              "ios": {
     *                  "itunes_id": 0,
     *                  "scheme_url": "zalo-1396017800851131651://[any_uri_in_there]",
     *                  "ur l": "http://app.zaloapp.com/id908617867?pid=zalo&c=gamecenter"
     *              },
     *              "wp_data": {
     *                  "protocol_url": "zalo-1396017800851131651://",
     *                  "url": "http://www.windowsphone.com/s?  appid=4e4dc260-6cdb-4f35-bbd7-9deb2ef4ea2f"
     *              }
     *          }
     * # Đường khác
     * var data = {
     *              "android": "gsn.game.zingplaynew1"
     *          }
     * ZJSBridge.Device.openApp(data)
     * @param {object} data
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openApp(data, callback = (data) => { }) {
        return native_bridge_1.default.jsCall(config_1.Action.openapp, data, callback);
    }
    /**
     * Config rotate
     * @example
     * ZJSBridge.Device.configRotate(0, e => {console.log(e)})
     * @param {(0|1|2|3)} rotate 0: default, 1: sensor, 2: force portrait, 3: force landscape
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static configRotate(rotate, callback) {
        return native_bridge_1.default.jsCall(config_1.Action.autorotate, { autoRotate: rotate }, callback);
    }
    /**
     * Show toast
     * @example
     * ZJSBridge.Device.showToast("Message", e => {console.log(e)})
     * @param {string} message message that need to show
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static showToast(message, callback) {
        return native_bridge_1.default.jsCall(config_1.Action.showtoast, { toast: message }, callback);
    }
    /**
     * Query location hide
     * @example
     * ZJSBridge.Device.queryLocationHide("I'm here!", "68966266", e => {console.log(e)})
     * @param {string} title
     * @param {string} touserid
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static queryLocationHide(title, touserid, callback) {
        const params = {
            title: title,
            touserid: touserid,
            zapp: native_bridge_1.default.getAppId(),
        };
        return native_bridge_1.default.jsCall(config_1.Action.querylocationhide, params, callback);
    }
    /**
     * Hide keyboard.
     * @example
     * ZJSBridge.Device.hideKeyboard(e => {console.log(e)})
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static hideKeyboard(callback) {
        return native_bridge_1.default.jsCall(config_1.Action.hidekeyboard, {}, callback);
    }
    /**
     * Open phone.
     * @example
     * ZJSBridge.Device.openPhone({"phoneNum":"+84123456789"})
     * @param {object} data
     * - Data đường socket notify:
     * > {"phoneNum":"+84123456789"}
     * - Data các đường khác:
     * > {"phoneCode":"+84123456789"}
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openPhone(data, callback = (data) => { }) {
        return native_bridge_1.default.jsCall(config_1.Action.openphone, data, callback);
    }
    /**
     * Open QR.
     * @example
     * ZJSBridge.Device.openQr(e => {console.log(e)})
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openQr(callback) {
        return native_bridge_1.default.jsCall(config_1.Action.openqr, {}, callback);
    }
    /**
     * View Current QR.
     * @example
     * ZJSBridge.Device.currentUserQr(e => {console.log(e)})
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static currentUserQr(callback) {
        return native_bridge_1.default.jsCall(config_1.Action.currentUserQr, {}, callback);
    }
    /**
     * Open SMS.
     * @example
     * ZJSBridge.Device.openSMS("content", "+84123456789")
     * @param {string} content
     * @param {string} phoneCode
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static openSMS(content, phoneCode, callback = (data) => { }) {
        return native_bridge_1.default.jsCall(config_1.Action.opensms, { content, phoneCode }, callback);
    }
    /**
     * View QR.
     * @example
     * ZJSBridge.Device.viewQr("123456", "ABC", e => {console.log(e)})
     * @param {string} uid
     * @param {string} dpn
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static viewQr(uid, dpn, callback) {
        const params = {
            uid: uid,
            dpn: dpn,
            zapp: native_bridge_1.default.getAppId(),
        };
        return native_bridge_1.default.jsCall(config_1.Action.viewqr, params, callback);
    }
    /**
     * Keep screen.
     * @example
     * ZJSBridge.Device.keepScreen(1, e => {console.log(e)})
     * @param {0|1} keep_screen_on
     * - "keep_screen_on": 1 // Gọi khi play video in web. Client sẽ keep screen on
     * - "keep_screen_on": 0 // Gọi khi stop video in web. Client sẽ không keep screen on nữa.
     * - Khi ra khỏi web client sẽ trả về "keep_screen_on": 0. Tránh TH màn hình sẽ sáng hoài.
     * @param {void} callback Hàm callback trả về kết quả sau khi gọi action
     */
    static keepScreen(keep_screen_on, callback) {
        const value = Number(keep_screen_on);
        return native_bridge_1.default.jsCall(config_1.Action.keepscreen, {
            data: {
                keep_screen_on: value,
            },
        }, callback);
    }
    /**
     * Get Language
     * @example
     * ZJSBridge.Device.getLanguage()
     * @returns {string} language
     */
    static getLanguage() {
        var cookies = document.cookie;
        return (cookies.replace(/(?:(?:^|.*;\s*)zlanguage\s*=\s*([^;]*).*$)|^.*$/, "$1") ||
            cookies.replace(/(?:(?:^|.*;\s*)language\s*=\s*([^;]*).*$)|^.*$/, "$1"));
    }
}
exports.default = Device;
